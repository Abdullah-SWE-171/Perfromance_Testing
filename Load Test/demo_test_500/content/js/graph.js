/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 72.0, "minX": 0.0, "maxY": 3316.0, "series": [{"data": [[0.0, 72.0], [0.1, 72.0], [0.2, 72.0], [0.3, 72.0], [0.4, 73.0], [0.5, 73.0], [0.6, 73.0], [0.7, 73.0], [0.8, 74.0], [0.9, 74.0], [1.0, 74.0], [1.1, 74.0], [1.2, 74.0], [1.3, 74.0], [1.4, 75.0], [1.5, 75.0], [1.6, 75.0], [1.7, 75.0], [1.8, 75.0], [1.9, 75.0], [2.0, 76.0], [2.1, 76.0], [2.2, 78.0], [2.3, 78.0], [2.4, 78.0], [2.5, 78.0], [2.6, 78.0], [2.7, 78.0], [2.8, 78.0], [2.9, 79.0], [3.0, 79.0], [3.1, 79.0], [3.2, 80.0], [3.3, 80.0], [3.4, 80.0], [3.5, 80.0], [3.6, 82.0], [3.7, 82.0], [3.8, 82.0], [3.9, 84.0], [4.0, 84.0], [4.1, 84.0], [4.2, 84.0], [4.3, 84.0], [4.4, 84.0], [4.5, 84.0], [4.6, 84.0], [4.7, 84.0], [4.8, 84.0], [4.9, 87.0], [5.0, 87.0], [5.1, 87.0], [5.2, 87.0], [5.3, 87.0], [5.4, 88.0], [5.5, 88.0], [5.6, 88.0], [5.7, 88.0], [5.8, 88.0], [5.9, 88.0], [6.0, 88.0], [6.1, 88.0], [6.2, 89.0], [6.3, 89.0], [6.4, 89.0], [6.5, 89.0], [6.6, 89.0], [6.7, 91.0], [6.8, 91.0], [6.9, 91.0], [7.0, 91.0], [7.1, 92.0], [7.2, 92.0], [7.3, 94.0], [7.4, 94.0], [7.5, 95.0], [7.6, 95.0], [7.7, 95.0], [7.8, 95.0], [7.9, 95.0], [8.0, 95.0], [8.1, 96.0], [8.2, 96.0], [8.3, 97.0], [8.4, 97.0], [8.5, 97.0], [8.6, 97.0], [8.7, 97.0], [8.8, 97.0], [8.9, 97.0], [9.0, 97.0], [9.1, 97.0], [9.2, 97.0], [9.3, 98.0], [9.4, 98.0], [9.5, 98.0], [9.6, 98.0], [9.7, 98.0], [9.8, 98.0], [9.9, 98.0], [10.0, 98.0], [10.1, 99.0], [10.2, 99.0], [10.3, 99.0], [10.4, 99.0], [10.5, 100.0], [10.6, 100.0], [10.7, 100.0], [10.8, 100.0], [10.9, 101.0], [11.0, 101.0], [11.1, 101.0], [11.2, 101.0], [11.3, 101.0], [11.4, 101.0], [11.5, 101.0], [11.6, 101.0], [11.7, 101.0], [11.8, 101.0], [11.9, 101.0], [12.0, 101.0], [12.1, 102.0], [12.2, 102.0], [12.3, 102.0], [12.4, 102.0], [12.5, 102.0], [12.6, 102.0], [12.7, 102.0], [12.8, 102.0], [12.9, 103.0], [13.0, 103.0], [13.1, 103.0], [13.2, 103.0], [13.3, 103.0], [13.4, 103.0], [13.5, 103.0], [13.6, 103.0], [13.7, 103.0], [13.8, 103.0], [13.9, 103.0], [14.0, 103.0], [14.1, 103.0], [14.2, 103.0], [14.3, 104.0], [14.4, 104.0], [14.5, 104.0], [14.6, 104.0], [14.7, 104.0], [14.8, 104.0], [14.9, 105.0], [15.0, 105.0], [15.1, 105.0], [15.2, 105.0], [15.3, 105.0], [15.4, 105.0], [15.5, 105.0], [15.6, 105.0], [15.7, 105.0], [15.8, 105.0], [15.9, 105.0], [16.0, 105.0], [16.1, 105.0], [16.2, 105.0], [16.3, 106.0], [16.4, 106.0], [16.5, 106.0], [16.6, 106.0], [16.7, 106.0], [16.8, 106.0], [16.9, 106.0], [17.0, 106.0], [17.1, 106.0], [17.2, 106.0], [17.3, 106.0], [17.4, 106.0], [17.5, 106.0], [17.6, 106.0], [17.7, 106.0], [17.8, 106.0], [17.9, 106.0], [18.0, 106.0], [18.1, 107.0], [18.2, 107.0], [18.3, 107.0], [18.4, 107.0], [18.5, 107.0], [18.6, 107.0], [18.7, 107.0], [18.8, 107.0], [18.9, 107.0], [19.0, 107.0], [19.1, 107.0], [19.2, 107.0], [19.3, 107.0], [19.4, 107.0], [19.5, 107.0], [19.6, 107.0], [19.7, 108.0], [19.8, 108.0], [19.9, 108.0], [20.0, 108.0], [20.1, 108.0], [20.2, 108.0], [20.3, 108.0], [20.4, 108.0], [20.5, 109.0], [20.6, 109.0], [20.7, 109.0], [20.8, 109.0], [20.9, 109.0], [21.0, 109.0], [21.1, 109.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 109.0], [21.6, 109.0], [21.7, 109.0], [21.8, 109.0], [21.9, 109.0], [22.0, 109.0], [22.1, 109.0], [22.2, 109.0], [22.3, 109.0], [22.4, 109.0], [22.5, 109.0], [22.6, 109.0], [22.7, 110.0], [22.8, 110.0], [22.9, 110.0], [23.0, 110.0], [23.1, 110.0], [23.2, 110.0], [23.3, 110.0], [23.4, 110.0], [23.5, 110.0], [23.6, 110.0], [23.7, 111.0], [23.8, 111.0], [23.9, 111.0], [24.0, 111.0], [24.1, 111.0], [24.2, 111.0], [24.3, 111.0], [24.4, 111.0], [24.5, 111.0], [24.6, 111.0], [24.7, 111.0], [24.8, 111.0], [24.9, 111.0], [25.0, 111.0], [25.1, 111.0], [25.2, 111.0], [25.3, 111.0], [25.4, 111.0], [25.5, 112.0], [25.6, 112.0], [25.7, 112.0], [25.8, 112.0], [25.9, 112.0], [26.0, 112.0], [26.1, 113.0], [26.2, 113.0], [26.3, 113.0], [26.4, 113.0], [26.5, 113.0], [26.6, 113.0], [26.7, 113.0], [26.8, 113.0], [26.9, 113.0], [27.0, 113.0], [27.1, 113.0], [27.2, 113.0], [27.3, 114.0], [27.4, 114.0], [27.5, 114.0], [27.6, 114.0], [27.7, 115.0], [27.8, 115.0], [27.9, 115.0], [28.0, 115.0], [28.1, 115.0], [28.2, 115.0], [28.3, 115.0], [28.4, 115.0], [28.5, 115.0], [28.6, 115.0], [28.7, 115.0], [28.8, 115.0], [28.9, 116.0], [29.0, 116.0], [29.1, 116.0], [29.2, 116.0], [29.3, 116.0], [29.4, 116.0], [29.5, 116.0], [29.6, 116.0], [29.7, 116.0], [29.8, 116.0], [29.9, 116.0], [30.0, 116.0], [30.1, 116.0], [30.2, 116.0], [30.3, 117.0], [30.4, 117.0], [30.5, 117.0], [30.6, 117.0], [30.7, 117.0], [30.8, 117.0], [30.9, 117.0], [31.0, 117.0], [31.1, 117.0], [31.2, 117.0], [31.3, 117.0], [31.4, 117.0], [31.5, 117.0], [31.6, 117.0], [31.7, 117.0], [31.8, 117.0], [31.9, 117.0], [32.0, 117.0], [32.1, 117.0], [32.2, 117.0], [32.3, 117.0], [32.4, 117.0], [32.5, 118.0], [32.6, 118.0], [32.7, 118.0], [32.8, 118.0], [32.9, 118.0], [33.0, 118.0], [33.1, 118.0], [33.2, 118.0], [33.3, 118.0], [33.4, 118.0], [33.5, 119.0], [33.6, 119.0], [33.7, 119.0], [33.8, 119.0], [33.9, 119.0], [34.0, 119.0], [34.1, 119.0], [34.2, 119.0], [34.3, 119.0], [34.4, 119.0], [34.5, 120.0], [34.6, 120.0], [34.7, 120.0], [34.8, 120.0], [34.9, 120.0], [35.0, 120.0], [35.1, 120.0], [35.2, 120.0], [35.3, 120.0], [35.4, 120.0], [35.5, 121.0], [35.6, 121.0], [35.7, 121.0], [35.8, 121.0], [35.9, 121.0], [36.0, 121.0], [36.1, 121.0], [36.2, 121.0], [36.3, 121.0], [36.4, 121.0], [36.5, 121.0], [36.6, 121.0], [36.7, 121.0], [36.8, 121.0], [36.9, 122.0], [37.0, 122.0], [37.1, 122.0], [37.2, 122.0], [37.3, 122.0], [37.4, 122.0], [37.5, 122.0], [37.6, 122.0], [37.7, 122.0], [37.8, 122.0], [37.9, 122.0], [38.0, 122.0], [38.1, 122.0], [38.2, 123.0], [38.3, 123.0], [38.4, 123.0], [38.5, 123.0], [38.6, 123.0], [38.7, 123.0], [38.8, 123.0], [38.9, 123.0], [39.0, 123.0], [39.1, 123.0], [39.2, 123.0], [39.3, 123.0], [39.4, 123.0], [39.5, 123.0], [39.6, 123.0], [39.7, 123.0], [39.8, 123.0], [39.9, 124.0], [40.0, 124.0], [40.1, 124.0], [40.2, 124.0], [40.3, 124.0], [40.4, 124.0], [40.5, 124.0], [40.6, 124.0], [40.7, 124.0], [40.8, 124.0], [40.9, 124.0], [41.0, 124.0], [41.1, 124.0], [41.2, 124.0], [41.3, 124.0], [41.4, 124.0], [41.5, 124.0], [41.6, 125.0], [41.7, 125.0], [41.8, 125.0], [41.9, 125.0], [42.0, 125.0], [42.1, 125.0], [42.2, 125.0], [42.3, 125.0], [42.4, 125.0], [42.5, 125.0], [42.6, 125.0], [42.7, 125.0], [42.8, 125.0], [42.9, 125.0], [43.0, 125.0], [43.1, 125.0], [43.2, 126.0], [43.3, 126.0], [43.4, 126.0], [43.5, 126.0], [43.6, 126.0], [43.7, 126.0], [43.8, 126.0], [43.9, 126.0], [44.0, 126.0], [44.1, 126.0], [44.2, 126.0], [44.3, 126.0], [44.4, 126.0], [44.5, 127.0], [44.6, 127.0], [44.7, 127.0], [44.8, 127.0], [44.9, 127.0], [45.0, 127.0], [45.1, 127.0], [45.2, 127.0], [45.3, 127.0], [45.4, 127.0], [45.5, 127.0], [45.6, 127.0], [45.7, 127.0], [45.8, 127.0], [45.9, 127.0], [46.0, 127.0], [46.1, 127.0], [46.2, 127.0], [46.3, 127.0], [46.4, 127.0], [46.5, 128.0], [46.6, 128.0], [46.7, 128.0], [46.8, 128.0], [46.9, 128.0], [47.0, 128.0], [47.1, 128.0], [47.2, 128.0], [47.3, 128.0], [47.4, 128.0], [47.5, 129.0], [47.6, 129.0], [47.7, 130.0], [47.8, 130.0], [47.9, 130.0], [48.0, 130.0], [48.1, 130.0], [48.2, 130.0], [48.3, 131.0], [48.4, 131.0], [48.5, 131.0], [48.6, 131.0], [48.7, 132.0], [48.8, 132.0], [48.9, 132.0], [49.0, 132.0], [49.1, 132.0], [49.2, 132.0], [49.3, 132.0], [49.4, 132.0], [49.5, 132.0], [49.6, 132.0], [49.7, 133.0], [49.8, 133.0], [49.9, 133.0], [50.0, 133.0], [50.1, 134.0], [50.2, 134.0], [50.3, 134.0], [50.4, 134.0], [50.5, 134.0], [50.6, 134.0], [50.7, 134.0], [50.8, 134.0], [50.9, 134.0], [51.0, 134.0], [51.1, 135.0], [51.2, 135.0], [51.3, 135.0], [51.4, 135.0], [51.5, 135.0], [51.6, 135.0], [51.7, 135.0], [51.8, 135.0], [51.9, 135.0], [52.0, 135.0], [52.1, 136.0], [52.2, 136.0], [52.3, 136.0], [52.4, 136.0], [52.5, 136.0], [52.6, 136.0], [52.7, 136.0], [52.8, 136.0], [52.9, 136.0], [53.0, 136.0], [53.1, 136.0], [53.2, 136.0], [53.3, 136.0], [53.4, 136.0], [53.5, 137.0], [53.6, 137.0], [53.7, 137.0], [53.8, 137.0], [53.9, 137.0], [54.0, 137.0], [54.1, 137.0], [54.2, 137.0], [54.3, 137.0], [54.4, 137.0], [54.5, 137.0], [54.6, 137.0], [54.7, 137.0], [54.8, 137.0], [54.9, 138.0], [55.0, 138.0], [55.1, 138.0], [55.2, 138.0], [55.3, 138.0], [55.4, 138.0], [55.5, 138.0], [55.6, 138.0], [55.7, 138.0], [55.8, 138.0], [55.9, 138.0], [56.0, 138.0], [56.1, 139.0], [56.2, 139.0], [56.3, 139.0], [56.4, 139.0], [56.5, 139.0], [56.6, 139.0], [56.7, 139.0], [56.8, 139.0], [56.9, 140.0], [57.0, 140.0], [57.1, 140.0], [57.2, 140.0], [57.3, 140.0], [57.4, 140.0], [57.5, 140.0], [57.6, 140.0], [57.7, 140.0], [57.8, 140.0], [57.9, 141.0], [58.0, 141.0], [58.1, 141.0], [58.2, 142.0], [58.3, 142.0], [58.4, 142.0], [58.5, 142.0], [58.6, 143.0], [58.7, 143.0], [58.8, 143.0], [58.9, 143.0], [59.0, 143.0], [59.1, 143.0], [59.2, 143.0], [59.3, 143.0], [59.4, 143.0], [59.5, 143.0], [59.6, 144.0], [59.7, 144.0], [59.8, 144.0], [59.9, 144.0], [60.0, 144.0], [60.1, 144.0], [60.2, 144.0], [60.3, 144.0], [60.4, 145.0], [60.5, 145.0], [60.6, 145.0], [60.7, 145.0], [60.8, 145.0], [60.9, 145.0], [61.0, 145.0], [61.1, 145.0], [61.2, 145.0], [61.3, 145.0], [61.4, 146.0], [61.5, 146.0], [61.6, 146.0], [61.7, 146.0], [61.8, 147.0], [61.9, 147.0], [62.0, 147.0], [62.1, 147.0], [62.2, 147.0], [62.3, 147.0], [62.4, 147.0], [62.5, 147.0], [62.6, 148.0], [62.7, 148.0], [62.8, 148.0], [62.9, 148.0], [63.0, 149.0], [63.1, 149.0], [63.2, 149.0], [63.3, 149.0], [63.4, 149.0], [63.5, 149.0], [63.6, 149.0], [63.7, 149.0], [63.8, 149.0], [63.9, 149.0], [64.0, 149.0], [64.1, 149.0], [64.2, 150.0], [64.3, 150.0], [64.4, 150.0], [64.5, 150.0], [64.6, 150.0], [64.7, 150.0], [64.8, 150.0], [64.9, 150.0], [65.0, 151.0], [65.1, 151.0], [65.2, 151.0], [65.3, 151.0], [65.4, 151.0], [65.5, 151.0], [65.6, 151.0], [65.7, 151.0], [65.8, 151.0], [65.9, 151.0], [66.0, 151.0], [66.1, 151.0], [66.2, 152.0], [66.3, 152.0], [66.4, 152.0], [66.5, 152.0], [66.6, 152.0], [66.7, 152.0], [66.8, 152.0], [66.9, 152.0], [67.0, 152.0], [67.1, 152.0], [67.2, 153.0], [67.3, 153.0], [67.4, 153.0], [67.5, 153.0], [67.6, 153.0], [67.7, 153.0], [67.8, 153.0], [67.9, 153.0], [68.0, 153.0], [68.1, 153.0], [68.2, 153.0], [68.3, 153.0], [68.4, 153.0], [68.5, 153.0], [68.6, 154.0], [68.7, 154.0], [68.8, 154.0], [68.9, 154.0], [69.0, 154.0], [69.1, 154.0], [69.2, 154.0], [69.3, 154.0], [69.4, 155.0], [69.5, 155.0], [69.6, 155.0], [69.7, 155.0], [69.8, 155.0], [69.9, 155.0], [70.0, 155.0], [70.1, 155.0], [70.2, 155.0], [70.3, 155.0], [70.4, 155.0], [70.5, 155.0], [70.6, 156.0], [70.7, 156.0], [70.8, 156.0], [70.9, 156.0], [71.0, 156.0], [71.1, 156.0], [71.2, 156.0], [71.3, 156.0], [71.4, 156.0], [71.5, 156.0], [71.6, 156.0], [71.7, 156.0], [71.8, 156.0], [71.9, 156.0], [72.0, 156.0], [72.1, 156.0], [72.2, 156.0], [72.3, 156.0], [72.4, 156.0], [72.5, 156.0], [72.6, 157.0], [72.7, 157.0], [72.8, 157.0], [72.9, 157.0], [73.0, 157.0], [73.1, 157.0], [73.2, 158.0], [73.3, 158.0], [73.4, 158.0], [73.5, 158.0], [73.6, 158.0], [73.7, 158.0], [73.8, 158.0], [73.9, 158.0], [74.0, 159.0], [74.1, 159.0], [74.2, 159.0], [74.3, 159.0], [74.4, 159.0], [74.5, 159.0], [74.6, 160.0], [74.7, 160.0], [74.8, 161.0], [74.9, 161.0], [75.0, 161.0], [75.1, 161.0], [75.2, 161.0], [75.3, 161.0], [75.4, 162.0], [75.5, 162.0], [75.6, 162.0], [75.7, 162.0], [75.8, 163.0], [75.9, 163.0], [76.0, 163.0], [76.1, 163.0], [76.2, 163.0], [76.3, 163.0], [76.4, 163.0], [76.5, 163.0], [76.6, 163.0], [76.7, 163.0], [76.8, 163.0], [76.9, 163.0], [77.0, 163.0], [77.1, 163.0], [77.2, 164.0], [77.3, 164.0], [77.4, 165.0], [77.5, 165.0], [77.6, 165.0], [77.7, 165.0], [77.8, 165.0], [77.9, 165.0], [78.0, 166.0], [78.1, 166.0], [78.2, 166.0], [78.3, 166.0], [78.4, 167.0], [78.5, 167.0], [78.6, 168.0], [78.7, 168.0], [78.8, 169.0], [78.9, 169.0], [79.0, 169.0], [79.1, 169.0], [79.2, 169.0], [79.3, 169.0], [79.4, 170.0], [79.5, 170.0], [79.6, 170.0], [79.7, 170.0], [79.8, 171.0], [79.9, 171.0], [80.0, 172.0], [80.1, 172.0], [80.2, 172.0], [80.3, 172.0], [80.4, 172.0], [80.5, 172.0], [80.6, 173.0], [80.7, 173.0], [80.8, 173.0], [80.9, 173.0], [81.0, 173.0], [81.1, 173.0], [81.2, 173.0], [81.3, 173.0], [81.4, 174.0], [81.5, 174.0], [81.6, 175.0], [81.7, 175.0], [81.8, 175.0], [81.9, 175.0], [82.0, 175.0], [82.1, 175.0], [82.2, 176.0], [82.3, 176.0], [82.4, 176.0], [82.5, 176.0], [82.6, 176.0], [82.7, 176.0], [82.8, 176.0], [82.9, 176.0], [83.0, 176.0], [83.1, 176.0], [83.2, 176.0], [83.3, 176.0], [83.4, 177.0], [83.5, 177.0], [83.6, 177.0], [83.7, 177.0], [83.8, 177.0], [83.9, 177.0], [84.0, 178.0], [84.1, 178.0], [84.2, 178.0], [84.3, 178.0], [84.4, 178.0], [84.5, 178.0], [84.6, 179.0], [84.7, 179.0], [84.8, 179.0], [84.9, 179.0], [85.0, 179.0], [85.1, 179.0], [85.2, 179.0], [85.3, 179.0], [85.4, 180.0], [85.5, 180.0], [85.6, 180.0], [85.7, 180.0], [85.8, 180.0], [85.9, 180.0], [86.0, 180.0], [86.1, 180.0], [86.2, 181.0], [86.3, 181.0], [86.4, 181.0], [86.5, 181.0], [86.6, 181.0], [86.7, 181.0], [86.8, 181.0], [86.9, 181.0], [87.0, 182.0], [87.1, 182.0], [87.2, 182.0], [87.3, 182.0], [87.4, 182.0], [87.5, 182.0], [87.6, 182.0], [87.7, 182.0], [87.8, 182.0], [87.9, 182.0], [88.0, 182.0], [88.1, 182.0], [88.2, 182.0], [88.3, 182.0], [88.4, 183.0], [88.5, 183.0], [88.6, 183.0], [88.7, 183.0], [88.8, 184.0], [88.9, 184.0], [89.0, 185.0], [89.1, 185.0], [89.2, 186.0], [89.3, 186.0], [89.4, 186.0], [89.5, 186.0], [89.6, 186.0], [89.7, 186.0], [89.8, 186.0], [89.9, 186.0], [90.0, 186.0], [90.1, 186.0], [90.2, 187.0], [90.3, 187.0], [90.4, 187.0], [90.5, 187.0], [90.6, 188.0], [90.7, 188.0], [90.8, 188.0], [90.9, 188.0], [91.0, 188.0], [91.1, 188.0], [91.2, 189.0], [91.3, 189.0], [91.4, 190.0], [91.5, 190.0], [91.6, 190.0], [91.7, 190.0], [91.8, 190.0], [91.9, 190.0], [92.0, 191.0], [92.1, 191.0], [92.2, 191.0], [92.3, 191.0], [92.4, 192.0], [92.5, 192.0], [92.6, 193.0], [92.7, 193.0], [92.8, 193.0], [92.9, 193.0], [93.0, 193.0], [93.1, 193.0], [93.2, 193.0], [93.3, 193.0], [93.4, 193.0], [93.5, 193.0], [93.6, 194.0], [93.7, 194.0], [93.8, 195.0], [93.9, 195.0], [94.0, 195.0], [94.1, 195.0], [94.2, 196.0], [94.3, 196.0], [94.4, 196.0], [94.5, 196.0], [94.6, 196.0], [94.7, 199.0], [94.8, 199.0], [94.9, 202.0], [95.0, 202.0], [95.1, 205.0], [95.2, 205.0], [95.3, 206.0], [95.4, 206.0], [95.5, 208.0], [95.6, 208.0], [95.7, 208.0], [95.8, 208.0], [95.9, 210.0], [96.0, 210.0], [96.1, 211.0], [96.2, 211.0], [96.3, 216.0], [96.4, 216.0], [96.5, 216.0], [96.6, 216.0], [96.7, 216.0], [96.8, 216.0], [96.9, 217.0], [97.0, 217.0], [97.1, 217.0], [97.2, 217.0], [97.3, 218.0], [97.4, 218.0], [97.5, 218.0], [97.6, 218.0], [97.7, 219.0], [97.8, 219.0], [97.9, 219.0], [98.0, 219.0], [98.1, 220.0], [98.2, 220.0], [98.3, 220.0], [98.4, 220.0], [98.5, 220.0], [98.6, 220.0], [98.7, 220.0], [98.8, 220.0], [98.9, 221.0], [99.0, 221.0], [99.1, 226.0], [99.2, 226.0], [99.3, 243.0], [99.4, 243.0], [99.5, 248.0], [99.6, 248.0], [99.7, 282.0], [99.8, 282.0], [99.9, 336.0], [100.0, 336.0]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[0.0, 72.0], [0.1, 72.0], [0.2, 72.0], [0.3, 72.0], [0.4, 75.0], [0.5, 75.0], [0.6, 75.0], [0.7, 75.0], [0.8, 75.0], [0.9, 75.0], [1.0, 76.0], [1.1, 76.0], [1.2, 76.0], [1.3, 76.0], [1.4, 77.0], [1.5, 77.0], [1.6, 77.0], [1.7, 77.0], [1.8, 78.0], [1.9, 78.0], [2.0, 78.0], [2.1, 78.0], [2.2, 79.0], [2.3, 79.0], [2.4, 79.0], [2.5, 79.0], [2.6, 79.0], [2.7, 79.0], [2.8, 81.0], [2.9, 81.0], [3.0, 82.0], [3.1, 82.0], [3.2, 82.0], [3.3, 82.0], [3.4, 83.0], [3.5, 83.0], [3.6, 83.0], [3.7, 83.0], [3.8, 83.0], [3.9, 83.0], [4.0, 83.0], [4.1, 83.0], [4.2, 84.0], [4.3, 84.0], [4.4, 84.0], [4.5, 84.0], [4.6, 84.0], [4.7, 84.0], [4.8, 85.0], [4.9, 85.0], [5.0, 85.0], [5.1, 85.0], [5.2, 85.0], [5.3, 85.0], [5.4, 85.0], [5.5, 85.0], [5.6, 87.0], [5.7, 87.0], [5.8, 87.0], [5.9, 87.0], [6.0, 88.0], [6.1, 88.0], [6.2, 88.0], [6.3, 88.0], [6.4, 89.0], [6.5, 89.0], [6.6, 89.0], [6.7, 90.0], [6.8, 90.0], [6.9, 90.0], [7.0, 90.0], [7.1, 91.0], [7.2, 91.0], [7.3, 91.0], [7.4, 91.0], [7.5, 92.0], [7.6, 92.0], [7.7, 92.0], [7.8, 92.0], [7.9, 92.0], [8.0, 92.0], [8.1, 93.0], [8.2, 93.0], [8.3, 94.0], [8.4, 94.0], [8.5, 94.0], [8.6, 94.0], [8.7, 95.0], [8.8, 95.0], [8.9, 95.0], [9.0, 95.0], [9.1, 96.0], [9.2, 96.0], [9.3, 96.0], [9.4, 96.0], [9.5, 96.0], [9.6, 96.0], [9.7, 97.0], [9.8, 97.0], [9.9, 97.0], [10.0, 97.0], [10.1, 97.0], [10.2, 97.0], [10.3, 97.0], [10.4, 97.0], [10.5, 98.0], [10.6, 98.0], [10.7, 98.0], [10.8, 98.0], [10.9, 98.0], [11.0, 98.0], [11.1, 98.0], [11.2, 98.0], [11.3, 98.0], [11.4, 98.0], [11.5, 98.0], [11.6, 98.0], [11.7, 98.0], [11.8, 98.0], [11.9, 98.0], [12.0, 98.0], [12.1, 99.0], [12.2, 99.0], [12.3, 99.0], [12.4, 99.0], [12.5, 99.0], [12.6, 99.0], [12.7, 99.0], [12.8, 99.0], [12.9, 99.0], [13.0, 99.0], [13.1, 101.0], [13.2, 101.0], [13.3, 101.0], [13.4, 101.0], [13.5, 101.0], [13.6, 101.0], [13.7, 101.0], [13.8, 101.0], [13.9, 101.0], [14.0, 101.0], [14.1, 102.0], [14.2, 102.0], [14.3, 102.0], [14.4, 102.0], [14.5, 102.0], [14.6, 102.0], [14.7, 102.0], [14.8, 102.0], [14.9, 103.0], [15.0, 103.0], [15.1, 103.0], [15.2, 103.0], [15.3, 103.0], [15.4, 103.0], [15.5, 103.0], [15.6, 103.0], [15.7, 104.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 105.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 105.0], [16.9, 105.0], [17.0, 105.0], [17.1, 105.0], [17.2, 105.0], [17.3, 106.0], [17.4, 106.0], [17.5, 106.0], [17.6, 106.0], [17.7, 106.0], [17.8, 106.0], [17.9, 106.0], [18.0, 106.0], [18.1, 106.0], [18.2, 106.0], [18.3, 106.0], [18.4, 106.0], [18.5, 106.0], [18.6, 107.0], [18.7, 107.0], [18.8, 107.0], [18.9, 107.0], [19.0, 107.0], [19.1, 107.0], [19.2, 107.0], [19.3, 107.0], [19.4, 107.0], [19.5, 108.0], [19.6, 108.0], [19.7, 108.0], [19.8, 108.0], [19.9, 108.0], [20.0, 108.0], [20.1, 108.0], [20.2, 108.0], [20.3, 108.0], [20.4, 108.0], [20.5, 109.0], [20.6, 109.0], [20.7, 109.0], [20.8, 109.0], [20.9, 109.0], [21.0, 109.0], [21.1, 109.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 109.0], [21.6, 109.0], [21.7, 109.0], [21.8, 109.0], [21.9, 109.0], [22.0, 109.0], [22.1, 109.0], [22.2, 109.0], [22.3, 109.0], [22.4, 109.0], [22.5, 109.0], [22.6, 109.0], [22.7, 109.0], [22.8, 110.0], [22.9, 110.0], [23.0, 110.0], [23.1, 110.0], [23.2, 110.0], [23.3, 110.0], [23.4, 110.0], [23.5, 110.0], [23.6, 110.0], [23.7, 110.0], [23.8, 110.0], [23.9, 110.0], [24.0, 111.0], [24.1, 111.0], [24.2, 111.0], [24.3, 111.0], [24.4, 112.0], [24.5, 112.0], [24.6, 112.0], [24.7, 112.0], [24.8, 112.0], [24.9, 112.0], [25.0, 112.0], [25.1, 112.0], [25.2, 112.0], [25.3, 112.0], [25.4, 112.0], [25.5, 112.0], [25.6, 112.0], [25.7, 112.0], [25.8, 112.0], [25.9, 112.0], [26.0, 113.0], [26.1, 113.0], [26.2, 113.0], [26.3, 113.0], [26.4, 113.0], [26.5, 113.0], [26.6, 114.0], [26.7, 114.0], [26.8, 114.0], [26.9, 114.0], [27.0, 114.0], [27.1, 114.0], [27.2, 114.0], [27.3, 114.0], [27.4, 114.0], [27.5, 114.0], [27.6, 114.0], [27.7, 114.0], [27.8, 114.0], [27.9, 114.0], [28.0, 114.0], [28.1, 114.0], [28.2, 114.0], [28.3, 114.0], [28.4, 114.0], [28.5, 114.0], [28.6, 114.0], [28.7, 114.0], [28.8, 114.0], [28.9, 114.0], [29.0, 114.0], [29.1, 114.0], [29.2, 114.0], [29.3, 114.0], [29.4, 114.0], [29.5, 114.0], [29.6, 115.0], [29.7, 115.0], [29.8, 115.0], [29.9, 115.0], [30.0, 115.0], [30.1, 115.0], [30.2, 115.0], [30.3, 115.0], [30.4, 115.0], [30.5, 115.0], [30.6, 115.0], [30.7, 115.0], [30.8, 116.0], [30.9, 116.0], [31.0, 116.0], [31.1, 116.0], [31.2, 116.0], [31.3, 116.0], [31.4, 116.0], [31.5, 116.0], [31.6, 116.0], [31.7, 116.0], [31.8, 116.0], [31.9, 116.0], [32.0, 117.0], [32.1, 117.0], [32.2, 117.0], [32.3, 117.0], [32.4, 118.0], [32.5, 118.0], [32.6, 118.0], [32.7, 118.0], [32.8, 118.0], [32.9, 118.0], [33.0, 118.0], [33.1, 118.0], [33.2, 118.0], [33.3, 118.0], [33.4, 118.0], [33.5, 118.0], [33.6, 119.0], [33.7, 119.0], [33.8, 119.0], [33.9, 119.0], [34.0, 120.0], [34.1, 120.0], [34.2, 120.0], [34.3, 120.0], [34.4, 120.0], [34.5, 120.0], [34.6, 120.0], [34.7, 120.0], [34.8, 120.0], [34.9, 120.0], [35.0, 120.0], [35.1, 120.0], [35.2, 120.0], [35.3, 120.0], [35.4, 121.0], [35.5, 121.0], [35.6, 121.0], [35.7, 121.0], [35.8, 121.0], [35.9, 121.0], [36.0, 121.0], [36.1, 121.0], [36.2, 121.0], [36.3, 121.0], [36.4, 121.0], [36.5, 121.0], [36.6, 121.0], [36.7, 121.0], [36.8, 121.0], [36.9, 121.0], [37.0, 121.0], [37.1, 121.0], [37.2, 121.0], [37.3, 121.0], [37.4, 122.0], [37.5, 122.0], [37.6, 122.0], [37.7, 122.0], [37.8, 122.0], [37.9, 122.0], [38.0, 122.0], [38.1, 122.0], [38.2, 122.0], [38.3, 122.0], [38.4, 122.0], [38.5, 122.0], [38.6, 122.0], [38.7, 122.0], [38.8, 123.0], [38.9, 123.0], [39.0, 123.0], [39.1, 123.0], [39.2, 123.0], [39.3, 123.0], [39.4, 123.0], [39.5, 123.0], [39.6, 123.0], [39.7, 123.0], [39.8, 123.0], [39.9, 123.0], [40.0, 124.0], [40.1, 124.0], [40.2, 124.0], [40.3, 124.0], [40.4, 124.0], [40.5, 124.0], [40.6, 124.0], [40.7, 124.0], [40.8, 124.0], [40.9, 124.0], [41.0, 124.0], [41.1, 124.0], [41.2, 124.0], [41.3, 124.0], [41.4, 124.0], [41.5, 124.0], [41.6, 124.0], [41.7, 124.0], [41.8, 124.0], [41.9, 124.0], [42.0, 125.0], [42.1, 125.0], [42.2, 125.0], [42.3, 125.0], [42.4, 125.0], [42.5, 125.0], [42.6, 125.0], [42.7, 125.0], [42.8, 125.0], [42.9, 125.0], [43.0, 125.0], [43.1, 125.0], [43.2, 125.0], [43.3, 125.0], [43.4, 126.0], [43.5, 126.0], [43.6, 126.0], [43.7, 126.0], [43.8, 126.0], [43.9, 126.0], [44.0, 126.0], [44.1, 126.0], [44.2, 126.0], [44.3, 126.0], [44.4, 126.0], [44.5, 126.0], [44.6, 126.0], [44.7, 126.0], [44.8, 126.0], [44.9, 126.0], [45.0, 126.0], [45.1, 126.0], [45.2, 127.0], [45.3, 127.0], [45.4, 127.0], [45.5, 127.0], [45.6, 127.0], [45.7, 127.0], [45.8, 127.0], [45.9, 127.0], [46.0, 127.0], [46.1, 127.0], [46.2, 127.0], [46.3, 127.0], [46.4, 127.0], [46.5, 127.0], [46.6, 127.0], [46.7, 127.0], [46.8, 127.0], [46.9, 127.0], [47.0, 128.0], [47.1, 128.0], [47.2, 128.0], [47.3, 128.0], [47.4, 128.0], [47.5, 128.0], [47.6, 128.0], [47.7, 128.0], [47.8, 128.0], [47.9, 128.0], [48.0, 128.0], [48.1, 128.0], [48.2, 128.0], [48.3, 128.0], [48.4, 128.0], [48.5, 128.0], [48.6, 128.0], [48.7, 128.0], [48.8, 128.0], [48.9, 128.0], [49.0, 129.0], [49.1, 129.0], [49.2, 129.0], [49.3, 129.0], [49.4, 129.0], [49.5, 129.0], [49.6, 129.0], [49.7, 129.0], [49.8, 130.0], [49.9, 130.0], [50.0, 130.0], [50.1, 130.0], [50.2, 130.0], [50.3, 130.0], [50.4, 130.0], [50.5, 130.0], [50.6, 130.0], [50.7, 130.0], [50.8, 130.0], [50.9, 130.0], [51.0, 130.0], [51.1, 130.0], [51.2, 130.0], [51.3, 130.0], [51.4, 131.0], [51.5, 131.0], [51.6, 131.0], [51.7, 131.0], [51.8, 131.0], [51.9, 131.0], [52.0, 131.0], [52.1, 131.0], [52.2, 131.0], [52.3, 131.0], [52.4, 131.0], [52.5, 131.0], [52.6, 131.0], [52.7, 131.0], [52.8, 131.0], [52.9, 131.0], [53.0, 131.0], [53.1, 131.0], [53.2, 131.0], [53.3, 131.0], [53.4, 132.0], [53.5, 132.0], [53.6, 132.0], [53.7, 132.0], [53.8, 132.0], [53.9, 132.0], [54.0, 132.0], [54.1, 132.0], [54.2, 132.0], [54.3, 132.0], [54.4, 132.0], [54.5, 132.0], [54.6, 132.0], [54.7, 132.0], [54.8, 132.0], [54.9, 132.0], [55.0, 133.0], [55.1, 133.0], [55.2, 133.0], [55.3, 133.0], [55.4, 133.0], [55.5, 133.0], [55.6, 133.0], [55.7, 133.0], [55.8, 133.0], [55.9, 133.0], [56.0, 133.0], [56.1, 133.0], [56.2, 133.0], [56.3, 133.0], [56.4, 133.0], [56.5, 133.0], [56.6, 134.0], [56.7, 134.0], [56.8, 134.0], [56.9, 134.0], [57.0, 134.0], [57.1, 134.0], [57.2, 134.0], [57.3, 134.0], [57.4, 134.0], [57.5, 134.0], [57.6, 134.0], [57.7, 134.0], [57.8, 134.0], [57.9, 134.0], [58.0, 134.0], [58.1, 134.0], [58.2, 134.0], [58.3, 134.0], [58.4, 135.0], [58.5, 135.0], [58.6, 135.0], [58.7, 135.0], [58.8, 135.0], [58.9, 135.0], [59.0, 135.0], [59.1, 135.0], [59.2, 136.0], [59.3, 136.0], [59.4, 136.0], [59.5, 136.0], [59.6, 136.0], [59.7, 136.0], [59.8, 136.0], [59.9, 136.0], [60.0, 136.0], [60.1, 136.0], [60.2, 136.0], [60.3, 136.0], [60.4, 136.0], [60.5, 136.0], [60.6, 136.0], [60.7, 136.0], [60.8, 136.0], [60.9, 136.0], [61.0, 136.0], [61.1, 136.0], [61.2, 137.0], [61.3, 137.0], [61.4, 137.0], [61.5, 137.0], [61.6, 137.0], [61.7, 137.0], [61.8, 137.0], [61.9, 137.0], [62.0, 137.0], [62.1, 137.0], [62.2, 137.0], [62.3, 137.0], [62.4, 137.0], [62.5, 137.0], [62.6, 138.0], [62.7, 138.0], [62.8, 138.0], [62.9, 138.0], [63.0, 138.0], [63.1, 138.0], [63.2, 138.0], [63.3, 138.0], [63.4, 138.0], [63.5, 138.0], [63.6, 138.0], [63.7, 138.0], [63.8, 138.0], [63.9, 138.0], [64.0, 138.0], [64.1, 138.0], [64.2, 139.0], [64.3, 139.0], [64.4, 139.0], [64.5, 139.0], [64.6, 139.0], [64.7, 139.0], [64.8, 140.0], [64.9, 140.0], [65.0, 140.0], [65.1, 140.0], [65.2, 140.0], [65.3, 140.0], [65.4, 140.0], [65.5, 140.0], [65.6, 141.0], [65.7, 141.0], [65.8, 141.0], [65.9, 141.0], [66.0, 141.0], [66.1, 141.0], [66.2, 141.0], [66.3, 141.0], [66.4, 141.0], [66.5, 141.0], [66.6, 141.0], [66.7, 141.0], [66.8, 142.0], [66.9, 142.0], [67.0, 142.0], [67.1, 142.0], [67.2, 142.0], [67.3, 142.0], [67.4, 143.0], [67.5, 143.0], [67.6, 143.0], [67.7, 143.0], [67.8, 143.0], [67.9, 143.0], [68.0, 143.0], [68.1, 143.0], [68.2, 143.0], [68.3, 143.0], [68.4, 143.0], [68.5, 143.0], [68.6, 144.0], [68.7, 144.0], [68.8, 144.0], [68.9, 144.0], [69.0, 144.0], [69.1, 144.0], [69.2, 144.0], [69.3, 144.0], [69.4, 144.0], [69.5, 144.0], [69.6, 144.0], [69.7, 144.0], [69.8, 144.0], [69.9, 144.0], [70.0, 144.0], [70.1, 144.0], [70.2, 144.0], [70.3, 144.0], [70.4, 144.0], [70.5, 144.0], [70.6, 145.0], [70.7, 145.0], [70.8, 146.0], [70.9, 146.0], [71.0, 146.0], [71.1, 146.0], [71.2, 146.0], [71.3, 146.0], [71.4, 146.0], [71.5, 146.0], [71.6, 146.0], [71.7, 146.0], [71.8, 146.0], [71.9, 146.0], [72.0, 146.0], [72.1, 146.0], [72.2, 147.0], [72.3, 147.0], [72.4, 147.0], [72.5, 147.0], [72.6, 147.0], [72.7, 147.0], [72.8, 147.0], [72.9, 147.0], [73.0, 147.0], [73.1, 147.0], [73.2, 147.0], [73.3, 147.0], [73.4, 147.0], [73.5, 147.0], [73.6, 147.0], [73.7, 147.0], [73.8, 148.0], [73.9, 148.0], [74.0, 148.0], [74.1, 148.0], [74.2, 148.0], [74.3, 148.0], [74.4, 148.0], [74.5, 148.0], [74.6, 148.0], [74.7, 148.0], [74.8, 148.0], [74.9, 148.0], [75.0, 148.0], [75.1, 148.0], [75.2, 148.0], [75.3, 148.0], [75.4, 148.0], [75.5, 148.0], [75.6, 148.0], [75.7, 148.0], [75.8, 149.0], [75.9, 149.0], [76.0, 149.0], [76.1, 149.0], [76.2, 149.0], [76.3, 149.0], [76.4, 149.0], [76.5, 149.0], [76.6, 149.0], [76.7, 149.0], [76.8, 149.0], [76.9, 149.0], [77.0, 149.0], [77.1, 149.0], [77.2, 150.0], [77.3, 150.0], [77.4, 150.0], [77.5, 150.0], [77.6, 150.0], [77.7, 150.0], [77.8, 150.0], [77.9, 150.0], [78.0, 150.0], [78.1, 150.0], [78.2, 150.0], [78.3, 150.0], [78.4, 150.0], [78.5, 150.0], [78.6, 151.0], [78.7, 151.0], [78.8, 151.0], [78.9, 151.0], [79.0, 151.0], [79.1, 151.0], [79.2, 151.0], [79.3, 151.0], [79.4, 151.0], [79.5, 151.0], [79.6, 152.0], [79.7, 152.0], [79.8, 152.0], [79.9, 152.0], [80.0, 152.0], [80.1, 152.0], [80.2, 152.0], [80.3, 152.0], [80.4, 152.0], [80.5, 152.0], [80.6, 153.0], [80.7, 153.0], [80.8, 153.0], [80.9, 153.0], [81.0, 153.0], [81.1, 153.0], [81.2, 153.0], [81.3, 153.0], [81.4, 153.0], [81.5, 153.0], [81.6, 153.0], [81.7, 153.0], [81.8, 153.0], [81.9, 153.0], [82.0, 153.0], [82.1, 153.0], [82.2, 153.0], [82.3, 153.0], [82.4, 154.0], [82.5, 154.0], [82.6, 154.0], [82.7, 154.0], [82.8, 154.0], [82.9, 154.0], [83.0, 154.0], [83.1, 154.0], [83.2, 154.0], [83.3, 154.0], [83.4, 154.0], [83.5, 154.0], [83.6, 155.0], [83.7, 155.0], [83.8, 155.0], [83.9, 155.0], [84.0, 155.0], [84.1, 155.0], [84.2, 155.0], [84.3, 155.0], [84.4, 156.0], [84.5, 156.0], [84.6, 156.0], [84.7, 156.0], [84.8, 156.0], [84.9, 156.0], [85.0, 156.0], [85.1, 156.0], [85.2, 156.0], [85.3, 156.0], [85.4, 156.0], [85.5, 156.0], [85.6, 156.0], [85.7, 156.0], [85.8, 157.0], [85.9, 157.0], [86.0, 157.0], [86.1, 157.0], [86.2, 157.0], [86.3, 157.0], [86.4, 157.0], [86.5, 157.0], [86.6, 157.0], [86.7, 157.0], [86.8, 157.0], [86.9, 157.0], [87.0, 158.0], [87.1, 158.0], [87.2, 158.0], [87.3, 158.0], [87.4, 158.0], [87.5, 158.0], [87.6, 159.0], [87.7, 159.0], [87.8, 159.0], [87.9, 159.0], [88.0, 159.0], [88.1, 159.0], [88.2, 159.0], [88.3, 159.0], [88.4, 159.0], [88.5, 159.0], [88.6, 160.0], [88.7, 160.0], [88.8, 160.0], [88.9, 160.0], [89.0, 161.0], [89.1, 161.0], [89.2, 161.0], [89.3, 161.0], [89.4, 161.0], [89.5, 161.0], [89.6, 162.0], [89.7, 162.0], [89.8, 162.0], [89.9, 162.0], [90.0, 162.0], [90.1, 162.0], [90.2, 162.0], [90.3, 162.0], [90.4, 162.0], [90.5, 162.0], [90.6, 162.0], [90.7, 162.0], [90.8, 163.0], [90.9, 163.0], [91.0, 163.0], [91.1, 163.0], [91.2, 165.0], [91.3, 165.0], [91.4, 166.0], [91.5, 166.0], [91.6, 166.0], [91.7, 166.0], [91.8, 166.0], [91.9, 166.0], [92.0, 167.0], [92.1, 167.0], [92.2, 167.0], [92.3, 167.0], [92.4, 167.0], [92.5, 167.0], [92.6, 168.0], [92.7, 168.0], [92.8, 170.0], [92.9, 170.0], [93.0, 171.0], [93.1, 171.0], [93.2, 171.0], [93.3, 171.0], [93.4, 172.0], [93.5, 172.0], [93.6, 172.0], [93.7, 174.0], [93.8, 174.0], [93.9, 175.0], [94.0, 175.0], [94.1, 175.0], [94.2, 175.0], [94.3, 176.0], [94.4, 176.0], [94.5, 177.0], [94.6, 177.0], [94.7, 178.0], [94.8, 178.0], [94.9, 179.0], [95.0, 179.0], [95.1, 181.0], [95.2, 181.0], [95.3, 181.0], [95.4, 181.0], [95.5, 186.0], [95.6, 186.0], [95.7, 191.0], [95.8, 191.0], [95.9, 191.0], [96.0, 191.0], [96.1, 192.0], [96.2, 192.0], [96.3, 195.0], [96.4, 195.0], [96.5, 196.0], [96.6, 196.0], [96.7, 198.0], [96.8, 198.0], [96.9, 201.0], [97.0, 201.0], [97.1, 203.0], [97.2, 203.0], [97.3, 204.0], [97.4, 204.0], [97.5, 206.0], [97.6, 206.0], [97.7, 207.0], [97.8, 207.0], [97.9, 211.0], [98.0, 211.0], [98.1, 215.0], [98.2, 215.0], [98.3, 217.0], [98.4, 217.0], [98.5, 227.0], [98.6, 227.0], [98.7, 234.0], [98.8, 234.0], [98.9, 236.0], [99.0, 236.0], [99.1, 247.0], [99.2, 247.0], [99.3, 271.0], [99.4, 271.0], [99.5, 273.0], [99.6, 273.0], [99.7, 284.0], [99.8, 284.0], [99.9, 352.0], [100.0, 352.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[0.0, 574.0], [0.1, 574.0], [0.2, 579.0], [0.3, 579.0], [0.4, 586.0], [0.5, 586.0], [0.6, 586.0], [0.7, 588.0], [0.8, 590.0], [0.9, 590.0], [1.0, 593.0], [1.1, 593.0], [1.2, 596.0], [1.3, 596.0], [1.4, 597.0], [1.5, 597.0], [1.6, 597.0], [1.7, 597.0], [1.8, 597.0], [1.9, 597.0], [2.0, 598.0], [2.1, 598.0], [2.2, 598.0], [2.3, 598.0], [2.4, 599.0], [2.5, 599.0], [2.6, 601.0], [2.7, 601.0], [2.8, 601.0], [2.9, 607.0], [3.0, 607.0], [3.1, 607.0], [3.2, 610.0], [3.3, 610.0], [3.4, 610.0], [3.5, 610.0], [3.6, 611.0], [3.7, 611.0], [3.8, 611.0], [3.9, 613.0], [4.0, 613.0], [4.1, 613.0], [4.2, 614.0], [4.3, 614.0], [4.4, 615.0], [4.5, 615.0], [4.6, 615.0], [4.7, 616.0], [4.8, 616.0], [4.9, 619.0], [5.0, 619.0], [5.1, 621.0], [5.2, 621.0], [5.3, 621.0], [5.4, 621.0], [5.5, 621.0], [5.6, 621.0], [5.7, 622.0], [5.8, 622.0], [5.9, 625.0], [6.0, 625.0], [6.1, 627.0], [6.2, 627.0], [6.3, 627.0], [6.4, 627.0], [6.5, 627.0], [6.6, 627.0], [6.7, 627.0], [6.8, 627.0], [6.9, 628.0], [7.0, 628.0], [7.1, 629.0], [7.2, 629.0], [7.3, 630.0], [7.4, 630.0], [7.5, 630.0], [7.6, 630.0], [7.7, 631.0], [7.8, 631.0], [7.9, 633.0], [8.0, 633.0], [8.1, 634.0], [8.2, 634.0], [8.3, 635.0], [8.4, 637.0], [8.5, 637.0], [8.6, 638.0], [8.7, 638.0], [8.8, 639.0], [8.9, 639.0], [9.0, 639.0], [9.1, 639.0], [9.2, 640.0], [9.3, 640.0], [9.4, 643.0], [9.5, 643.0], [9.6, 643.0], [9.7, 643.0], [9.8, 644.0], [9.9, 644.0], [10.0, 645.0], [10.1, 645.0], [10.2, 645.0], [10.3, 645.0], [10.4, 646.0], [10.5, 646.0], [10.6, 647.0], [10.7, 647.0], [10.8, 649.0], [10.9, 649.0], [11.0, 649.0], [11.1, 649.0], [11.2, 650.0], [11.3, 650.0], [11.4, 651.0], [11.5, 651.0], [11.6, 652.0], [11.7, 652.0], [11.8, 652.0], [11.9, 652.0], [12.0, 653.0], [12.1, 653.0], [12.2, 653.0], [12.3, 653.0], [12.4, 653.0], [12.5, 653.0], [12.6, 654.0], [12.7, 654.0], [12.8, 654.0], [12.9, 654.0], [13.0, 655.0], [13.1, 655.0], [13.2, 655.0], [13.3, 655.0], [13.4, 655.0], [13.5, 655.0], [13.6, 655.0], [13.7, 655.0], [13.8, 656.0], [13.9, 656.0], [14.0, 656.0], [14.1, 656.0], [14.2, 658.0], [14.3, 658.0], [14.4, 659.0], [14.5, 659.0], [14.6, 659.0], [14.7, 659.0], [14.8, 660.0], [14.9, 660.0], [15.0, 661.0], [15.1, 661.0], [15.2, 662.0], [15.3, 662.0], [15.4, 663.0], [15.5, 663.0], [15.6, 664.0], [15.7, 664.0], [15.8, 665.0], [15.9, 665.0], [16.0, 665.0], [16.1, 665.0], [16.2, 666.0], [16.3, 666.0], [16.4, 666.0], [16.5, 666.0], [16.6, 666.0], [16.7, 666.0], [16.8, 667.0], [16.9, 667.0], [17.0, 667.0], [17.1, 667.0], [17.2, 667.0], [17.3, 667.0], [17.4, 671.0], [17.5, 671.0], [17.6, 672.0], [17.7, 672.0], [17.8, 672.0], [17.9, 672.0], [18.0, 673.0], [18.1, 673.0], [18.2, 673.0], [18.3, 673.0], [18.4, 674.0], [18.5, 674.0], [18.6, 674.0], [18.7, 674.0], [18.8, 675.0], [18.9, 675.0], [19.0, 675.0], [19.1, 675.0], [19.2, 675.0], [19.3, 675.0], [19.4, 678.0], [19.5, 678.0], [19.6, 680.0], [19.7, 680.0], [19.8, 680.0], [19.9, 680.0], [20.0, 682.0], [20.1, 682.0], [20.2, 683.0], [20.3, 683.0], [20.4, 685.0], [20.5, 685.0], [20.6, 686.0], [20.7, 686.0], [20.8, 686.0], [20.9, 686.0], [21.0, 686.0], [21.1, 686.0], [21.2, 691.0], [21.3, 691.0], [21.4, 692.0], [21.5, 692.0], [21.6, 693.0], [21.7, 693.0], [21.8, 695.0], [21.9, 695.0], [22.0, 695.0], [22.1, 695.0], [22.2, 695.0], [22.3, 695.0], [22.4, 696.0], [22.5, 696.0], [22.6, 698.0], [22.7, 698.0], [22.8, 699.0], [22.9, 699.0], [23.0, 700.0], [23.1, 700.0], [23.2, 700.0], [23.3, 700.0], [23.4, 700.0], [23.5, 700.0], [23.6, 701.0], [23.7, 701.0], [23.8, 701.0], [23.9, 701.0], [24.0, 703.0], [24.1, 703.0], [24.2, 704.0], [24.3, 704.0], [24.4, 704.0], [24.5, 704.0], [24.6, 705.0], [24.7, 705.0], [24.8, 705.0], [24.9, 705.0], [25.0, 705.0], [25.1, 705.0], [25.2, 705.0], [25.3, 705.0], [25.4, 708.0], [25.5, 708.0], [25.6, 709.0], [25.7, 709.0], [25.8, 710.0], [25.9, 710.0], [26.0, 711.0], [26.1, 711.0], [26.2, 712.0], [26.3, 712.0], [26.4, 712.0], [26.5, 712.0], [26.6, 713.0], [26.7, 713.0], [26.8, 714.0], [26.9, 714.0], [27.0, 714.0], [27.1, 714.0], [27.2, 714.0], [27.3, 714.0], [27.4, 715.0], [27.5, 715.0], [27.6, 716.0], [27.7, 716.0], [27.8, 716.0], [27.9, 716.0], [28.0, 717.0], [28.1, 717.0], [28.2, 717.0], [28.3, 717.0], [28.4, 718.0], [28.5, 718.0], [28.6, 718.0], [28.7, 718.0], [28.8, 719.0], [28.9, 719.0], [29.0, 719.0], [29.1, 719.0], [29.2, 722.0], [29.3, 722.0], [29.4, 723.0], [29.5, 723.0], [29.6, 723.0], [29.7, 723.0], [29.8, 723.0], [29.9, 723.0], [30.0, 725.0], [30.1, 725.0], [30.2, 726.0], [30.3, 726.0], [30.4, 726.0], [30.5, 726.0], [30.6, 727.0], [30.7, 727.0], [30.8, 727.0], [30.9, 727.0], [31.0, 727.0], [31.1, 727.0], [31.2, 727.0], [31.3, 727.0], [31.4, 728.0], [31.5, 728.0], [31.6, 728.0], [31.7, 728.0], [31.8, 729.0], [31.9, 729.0], [32.0, 729.0], [32.1, 729.0], [32.2, 729.0], [32.3, 729.0], [32.4, 730.0], [32.5, 730.0], [32.6, 731.0], [32.7, 731.0], [32.8, 731.0], [32.9, 731.0], [33.0, 731.0], [33.1, 731.0], [33.2, 731.0], [33.3, 731.0], [33.4, 732.0], [33.5, 732.0], [33.6, 733.0], [33.7, 733.0], [33.8, 733.0], [33.9, 733.0], [34.0, 734.0], [34.1, 734.0], [34.2, 734.0], [34.3, 734.0], [34.4, 735.0], [34.5, 735.0], [34.6, 735.0], [34.7, 735.0], [34.8, 735.0], [34.9, 735.0], [35.0, 735.0], [35.1, 735.0], [35.2, 737.0], [35.3, 737.0], [35.4, 737.0], [35.5, 737.0], [35.6, 738.0], [35.7, 738.0], [35.8, 738.0], [35.9, 738.0], [36.0, 738.0], [36.1, 738.0], [36.2, 739.0], [36.3, 739.0], [36.4, 741.0], [36.5, 741.0], [36.6, 742.0], [36.7, 742.0], [36.8, 742.0], [36.9, 742.0], [37.0, 742.0], [37.1, 742.0], [37.2, 743.0], [37.3, 743.0], [37.4, 743.0], [37.5, 743.0], [37.6, 743.0], [37.7, 743.0], [37.8, 745.0], [37.9, 745.0], [38.0, 745.0], [38.1, 745.0], [38.2, 745.0], [38.3, 745.0], [38.4, 746.0], [38.5, 746.0], [38.6, 746.0], [38.7, 746.0], [38.8, 747.0], [38.9, 747.0], [39.0, 747.0], [39.1, 747.0], [39.2, 749.0], [39.3, 749.0], [39.4, 750.0], [39.5, 750.0], [39.6, 752.0], [39.7, 752.0], [39.8, 752.0], [39.9, 752.0], [40.0, 752.0], [40.1, 752.0], [40.2, 752.0], [40.3, 752.0], [40.4, 752.0], [40.5, 752.0], [40.6, 752.0], [40.7, 752.0], [40.8, 753.0], [40.9, 753.0], [41.0, 753.0], [41.1, 753.0], [41.2, 754.0], [41.3, 754.0], [41.4, 755.0], [41.5, 755.0], [41.6, 755.0], [41.7, 755.0], [41.8, 755.0], [41.9, 755.0], [42.0, 755.0], [42.1, 755.0], [42.2, 757.0], [42.3, 757.0], [42.4, 757.0], [42.5, 757.0], [42.6, 757.0], [42.7, 757.0], [42.8, 757.0], [42.9, 757.0], [43.0, 757.0], [43.1, 757.0], [43.2, 758.0], [43.3, 758.0], [43.4, 760.0], [43.5, 760.0], [43.6, 761.0], [43.7, 761.0], [43.8, 762.0], [43.9, 762.0], [44.0, 762.0], [44.1, 762.0], [44.2, 765.0], [44.3, 765.0], [44.4, 767.0], [44.5, 767.0], [44.6, 767.0], [44.7, 767.0], [44.8, 767.0], [44.9, 767.0], [45.0, 769.0], [45.1, 769.0], [45.2, 769.0], [45.3, 769.0], [45.4, 769.0], [45.5, 769.0], [45.6, 771.0], [45.7, 771.0], [45.8, 773.0], [45.9, 773.0], [46.0, 773.0], [46.1, 773.0], [46.2, 774.0], [46.3, 774.0], [46.4, 774.0], [46.5, 774.0], [46.6, 775.0], [46.7, 775.0], [46.8, 775.0], [46.9, 775.0], [47.0, 775.0], [47.1, 775.0], [47.2, 776.0], [47.3, 776.0], [47.4, 776.0], [47.5, 776.0], [47.6, 776.0], [47.7, 776.0], [47.8, 776.0], [47.9, 776.0], [48.0, 777.0], [48.1, 777.0], [48.2, 777.0], [48.3, 777.0], [48.4, 777.0], [48.5, 777.0], [48.6, 777.0], [48.7, 777.0], [48.8, 778.0], [48.9, 778.0], [49.0, 779.0], [49.1, 779.0], [49.2, 779.0], [49.3, 779.0], [49.4, 779.0], [49.5, 779.0], [49.6, 781.0], [49.7, 781.0], [49.8, 781.0], [49.9, 781.0], [50.0, 781.0], [50.1, 781.0], [50.2, 781.0], [50.3, 781.0], [50.4, 782.0], [50.5, 782.0], [50.6, 784.0], [50.7, 784.0], [50.8, 784.0], [50.9, 784.0], [51.0, 787.0], [51.1, 787.0], [51.2, 787.0], [51.3, 787.0], [51.4, 788.0], [51.5, 788.0], [51.6, 788.0], [51.7, 788.0], [51.8, 789.0], [51.9, 789.0], [52.0, 789.0], [52.1, 789.0], [52.2, 789.0], [52.3, 789.0], [52.4, 789.0], [52.5, 789.0], [52.6, 789.0], [52.7, 789.0], [52.8, 790.0], [52.9, 790.0], [53.0, 791.0], [53.1, 791.0], [53.2, 791.0], [53.3, 791.0], [53.4, 792.0], [53.5, 792.0], [53.6, 793.0], [53.7, 793.0], [53.8, 793.0], [53.9, 793.0], [54.0, 794.0], [54.1, 794.0], [54.2, 794.0], [54.3, 794.0], [54.4, 794.0], [54.5, 794.0], [54.6, 794.0], [54.7, 794.0], [54.8, 796.0], [54.9, 796.0], [55.0, 797.0], [55.1, 797.0], [55.2, 797.0], [55.3, 797.0], [55.4, 799.0], [55.5, 799.0], [55.6, 799.0], [55.7, 799.0], [55.8, 800.0], [55.9, 800.0], [56.0, 801.0], [56.1, 801.0], [56.2, 801.0], [56.3, 801.0], [56.4, 804.0], [56.5, 804.0], [56.6, 805.0], [56.7, 805.0], [56.8, 805.0], [56.9, 805.0], [57.0, 805.0], [57.1, 805.0], [57.2, 805.0], [57.3, 805.0], [57.4, 806.0], [57.5, 806.0], [57.6, 807.0], [57.7, 807.0], [57.8, 807.0], [57.9, 807.0], [58.0, 808.0], [58.1, 808.0], [58.2, 808.0], [58.3, 808.0], [58.4, 808.0], [58.5, 808.0], [58.6, 808.0], [58.7, 808.0], [58.8, 809.0], [58.9, 809.0], [59.0, 810.0], [59.1, 810.0], [59.2, 810.0], [59.3, 810.0], [59.4, 811.0], [59.5, 811.0], [59.6, 812.0], [59.7, 812.0], [59.8, 814.0], [59.9, 814.0], [60.0, 814.0], [60.1, 814.0], [60.2, 815.0], [60.3, 815.0], [60.4, 815.0], [60.5, 815.0], [60.6, 815.0], [60.7, 815.0], [60.8, 816.0], [60.9, 816.0], [61.0, 817.0], [61.1, 817.0], [61.2, 819.0], [61.3, 819.0], [61.4, 819.0], [61.5, 820.0], [61.6, 820.0], [61.7, 820.0], [61.8, 820.0], [61.9, 822.0], [62.0, 822.0], [62.1, 822.0], [62.2, 823.0], [62.3, 823.0], [62.4, 823.0], [62.5, 824.0], [62.6, 824.0], [62.7, 824.0], [62.8, 824.0], [62.9, 825.0], [63.0, 825.0], [63.1, 825.0], [63.2, 826.0], [63.3, 826.0], [63.4, 826.0], [63.5, 826.0], [63.6, 826.0], [63.7, 826.0], [63.8, 826.0], [63.9, 828.0], [64.0, 829.0], [64.1, 829.0], [64.2, 830.0], [64.3, 830.0], [64.4, 830.0], [64.5, 830.0], [64.6, 830.0], [64.7, 833.0], [64.8, 833.0], [64.9, 834.0], [65.0, 834.0], [65.1, 835.0], [65.2, 835.0], [65.3, 836.0], [65.4, 836.0], [65.5, 836.0], [65.6, 836.0], [65.7, 836.0], [65.8, 836.0], [65.9, 837.0], [66.0, 837.0], [66.1, 837.0], [66.2, 837.0], [66.3, 840.0], [66.4, 840.0], [66.5, 841.0], [66.6, 841.0], [66.7, 841.0], [66.8, 841.0], [66.9, 842.0], [67.0, 842.0], [67.1, 845.0], [67.2, 845.0], [67.3, 846.0], [67.4, 846.0], [67.5, 846.0], [67.6, 846.0], [67.7, 847.0], [67.8, 847.0], [67.9, 847.0], [68.0, 847.0], [68.1, 850.0], [68.2, 850.0], [68.3, 851.0], [68.4, 851.0], [68.5, 851.0], [68.6, 851.0], [68.7, 853.0], [68.8, 853.0], [68.9, 857.0], [69.0, 857.0], [69.1, 859.0], [69.2, 859.0], [69.3, 860.0], [69.4, 860.0], [69.5, 861.0], [69.6, 861.0], [69.7, 861.0], [69.8, 861.0], [69.9, 861.0], [70.0, 861.0], [70.1, 867.0], [70.2, 867.0], [70.3, 870.0], [70.4, 870.0], [70.5, 871.0], [70.6, 871.0], [70.7, 872.0], [70.8, 872.0], [70.9, 874.0], [71.0, 874.0], [71.1, 880.0], [71.2, 880.0], [71.3, 881.0], [71.4, 881.0], [71.5, 885.0], [71.6, 885.0], [71.7, 889.0], [71.8, 889.0], [71.9, 891.0], [72.0, 891.0], [72.1, 918.0], [72.2, 918.0], [72.3, 924.0], [72.4, 924.0], [72.5, 976.0], [72.6, 976.0], [72.7, 1020.0], [72.8, 1020.0], [72.9, 1030.0], [73.0, 1030.0], [73.1, 1045.0], [73.2, 1045.0], [73.3, 1048.0], [73.4, 1048.0], [73.5, 1097.0], [73.6, 1097.0], [73.7, 1108.0], [73.8, 1108.0], [73.9, 1108.0], [74.0, 1108.0], [74.1, 1114.0], [74.2, 1114.0], [74.3, 1114.0], [74.4, 1114.0], [74.5, 1148.0], [74.6, 1148.0], [74.7, 1150.0], [74.8, 1150.0], [74.9, 1152.0], [75.0, 1152.0], [75.1, 1157.0], [75.2, 1157.0], [75.3, 1169.0], [75.4, 1169.0], [75.5, 1211.0], [75.6, 1211.0], [75.7, 1225.0], [75.8, 1225.0], [75.9, 1237.0], [76.0, 1237.0], [76.1, 1239.0], [76.2, 1239.0], [76.3, 1245.0], [76.4, 1245.0], [76.5, 1249.0], [76.6, 1249.0], [76.7, 1266.0], [76.8, 1266.0], [76.9, 1277.0], [77.0, 1277.0], [77.1, 1289.0], [77.2, 1289.0], [77.3, 1295.0], [77.4, 1295.0], [77.5, 1305.0], [77.6, 1305.0], [77.7, 1342.0], [77.8, 1342.0], [77.9, 1344.0], [78.0, 1344.0], [78.1, 1346.0], [78.2, 1346.0], [78.3, 1354.0], [78.4, 1354.0], [78.5, 1360.0], [78.6, 1360.0], [78.7, 1366.0], [78.8, 1366.0], [78.9, 1373.0], [79.0, 1373.0], [79.1, 1375.0], [79.2, 1375.0], [79.3, 1384.0], [79.4, 1384.0], [79.5, 1384.0], [79.6, 1384.0], [79.7, 1389.0], [79.8, 1389.0], [79.9, 1391.0], [80.0, 1391.0], [80.1, 1398.0], [80.2, 1398.0], [80.3, 1398.0], [80.4, 1398.0], [80.5, 1404.0], [80.6, 1404.0], [80.7, 1406.0], [80.8, 1406.0], [80.9, 1407.0], [81.0, 1407.0], [81.1, 1408.0], [81.2, 1408.0], [81.3, 1418.0], [81.4, 1418.0], [81.5, 1434.0], [81.6, 1434.0], [81.7, 1483.0], [81.8, 1483.0], [81.9, 1520.0], [82.0, 1520.0], [82.1, 1564.0], [82.2, 1564.0], [82.3, 1570.0], [82.4, 1570.0], [82.5, 1597.0], [82.6, 1597.0], [82.7, 1716.0], [82.8, 1716.0], [82.9, 1721.0], [83.0, 1721.0], [83.1, 1722.0], [83.2, 1722.0], [83.3, 1732.0], [83.4, 1732.0], [83.5, 1737.0], [83.6, 1737.0], [83.7, 1768.0], [83.8, 1768.0], [83.9, 1772.0], [84.0, 1772.0], [84.1, 1819.0], [84.2, 1819.0], [84.3, 1826.0], [84.4, 1826.0], [84.5, 1835.0], [84.6, 1835.0], [84.7, 1863.0], [84.8, 1863.0], [84.9, 1900.0], [85.0, 1900.0], [85.1, 1914.0], [85.2, 1914.0], [85.3, 1915.0], [85.4, 1915.0], [85.5, 1923.0], [85.6, 1923.0], [85.7, 1931.0], [85.8, 1931.0], [85.9, 1946.0], [86.0, 1946.0], [86.1, 1968.0], [86.2, 1968.0], [86.3, 1975.0], [86.4, 1975.0], [86.5, 2109.0], [86.6, 2109.0], [86.7, 2125.0], [86.8, 2125.0], [86.9, 2127.0], [87.0, 2127.0], [87.1, 2246.0], [87.2, 2246.0], [87.3, 2276.0], [87.4, 2276.0], [87.5, 2306.0], [87.6, 2306.0], [87.7, 2311.0], [87.8, 2311.0], [87.9, 2312.0], [88.0, 2312.0], [88.1, 2327.0], [88.2, 2327.0], [88.3, 2335.0], [88.4, 2335.0], [88.5, 2361.0], [88.6, 2361.0], [88.7, 2376.0], [88.8, 2376.0], [88.9, 2409.0], [89.0, 2409.0], [89.1, 2414.0], [89.2, 2414.0], [89.3, 2425.0], [89.4, 2425.0], [89.5, 2495.0], [89.6, 2495.0], [89.7, 2499.0], [89.8, 2499.0], [89.9, 2506.0], [90.0, 2506.0], [90.1, 2535.0], [90.2, 2535.0], [90.3, 2547.0], [90.4, 2547.0], [90.5, 2552.0], [90.6, 2552.0], [90.7, 2560.0], [90.8, 2560.0], [90.9, 2592.0], [91.0, 2592.0], [91.1, 2635.0], [91.2, 2635.0], [91.3, 2643.0], [91.4, 2643.0], [91.5, 2671.0], [91.6, 2671.0], [91.7, 2674.0], [91.8, 2674.0], [91.9, 2678.0], [92.0, 2678.0], [92.1, 2685.0], [92.2, 2685.0], [92.3, 2708.0], [92.4, 2708.0], [92.5, 2724.0], [92.6, 2724.0], [92.7, 2733.0], [92.8, 2733.0], [92.9, 2761.0], [93.0, 2761.0], [93.1, 2763.0], [93.2, 2763.0], [93.3, 2767.0], [93.4, 2767.0], [93.5, 2791.0], [93.6, 2791.0], [93.7, 2809.0], [93.8, 2809.0], [93.9, 2845.0], [94.0, 2845.0], [94.1, 2854.0], [94.2, 2854.0], [94.3, 2862.0], [94.4, 2862.0], [94.5, 2863.0], [94.6, 2863.0], [94.7, 2875.0], [94.8, 2875.0], [94.9, 2885.0], [95.0, 2885.0], [95.1, 2891.0], [95.2, 2891.0], [95.3, 2894.0], [95.4, 2894.0], [95.5, 2903.0], [95.6, 2903.0], [95.7, 2908.0], [95.8, 2908.0], [95.9, 2910.0], [96.0, 2910.0], [96.1, 2919.0], [96.2, 2919.0], [96.3, 2919.0], [96.4, 2919.0], [96.5, 2921.0], [96.6, 2921.0], [96.7, 2926.0], [96.8, 2926.0], [96.9, 2935.0], [97.0, 2935.0], [97.1, 2997.0], [97.2, 2997.0], [97.3, 3022.0], [97.4, 3022.0], [97.5, 3056.0], [97.6, 3056.0], [97.7, 3062.0], [97.8, 3062.0], [97.9, 3085.0], [98.0, 3085.0], [98.1, 3105.0], [98.2, 3105.0], [98.3, 3153.0], [98.4, 3153.0], [98.5, 3155.0], [98.6, 3155.0], [98.7, 3159.0], [98.8, 3159.0], [98.9, 3169.0], [99.0, 3169.0], [99.1, 3179.0], [99.2, 3179.0], [99.3, 3182.0], [99.4, 3182.0], [99.5, 3189.0], [99.6, 3189.0], [99.7, 3274.0], [99.8, 3274.0], [99.9, 3316.0], [100.0, 3316.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 422.0, "series": [{"data": [[0.0, 52.0], [300.0, 1.0], [100.0, 422.0], [200.0, 25.0]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[0.0, 65.0], [300.0, 1.0], [100.0, 419.0], [200.0, 15.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[600.0, 102.0], [700.0, 164.0], [800.0, 81.0], [900.0, 3.0], [1000.0, 5.0], [1100.0, 9.0], [1200.0, 10.0], [1300.0, 15.0], [1400.0, 7.0], [1500.0, 4.0], [1700.0, 7.0], [1800.0, 4.0], [1900.0, 8.0], [2100.0, 3.0], [2300.0, 7.0], [2200.0, 2.0], [2400.0, 5.0], [2500.0, 6.0], [2600.0, 6.0], [2700.0, 7.0], [2800.0, 9.0], [2900.0, 9.0], [3000.0, 4.0], [3100.0, 8.0], [3200.0, 1.0], [3300.0, 1.0], [500.0, 13.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 91.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [[0.0, 1000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 409.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 91.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 75.05133333333319, "minX": 1.66745826E12, "maxY": 75.05133333333319, "series": [{"data": [[1.66745826E12, 75.05133333333319]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745826E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 91.4285714285714, "minX": 1.0, "maxY": 2280.8387096774195, "series": [{"data": [[7.0, 146.0], [10.0, 136.0], [13.0, 161.5], [14.0, 220.0], [15.0, 225.5], [17.0, 216.5], [19.0, 111.0], [20.0, 136.0], [22.0, 121.0], [24.0, 182.0], [25.0, 171.0], [26.0, 146.0], [27.0, 145.0], [31.0, 119.5], [35.0, 184.66666666666666], [34.0, 182.0], [36.0, 136.0], [39.0, 120.66666666666667], [38.0, 120.0], [40.0, 111.0], [43.0, 113.8888888888889], [42.0, 119.0], [45.0, 94.2857142857143], [44.0, 91.4285714285714], [47.0, 123.11111111111113], [46.0, 127.28571428571429], [48.0, 151.84615384615387], [49.0, 132.3529411764706], [50.0, 104.0], [51.0, 153.66666666666666], [53.0, 115.58333333333331], [52.0, 116.0], [55.0, 138.0], [54.0, 106.25], [56.0, 120.89999999999998], [57.0, 98.3125], [58.0, 111.66666666666667], [59.0, 108.5], [60.0, 119.09090909090911], [61.0, 107.0], [62.0, 157.0], [63.0, 120.75], [65.0, 139.28571428571428], [64.0, 153.0], [67.0, 138.26923076923077], [66.0, 122.99999999999999], [71.0, 124.0], [70.0, 126.85714285714286], [68.0, 130.28571428571428], [69.0, 121.0], [74.0, 153.33333333333334], [73.0, 148.0], [72.0, 108.0], [79.0, 209.11111111111111], [78.0, 211.0], [82.0, 153.61904761904762], [83.0, 116.77777777777777], [80.0, 117.0], [84.0, 127.0], [85.0, 175.0], [86.0, 150.53846153846152], [97.0, 125.0], [100.0, 166.0], [126.0, 143.0], [141.0, 336.0], [140.0, 115.0], [148.0, 124.0], [154.0, 163.37755102040808]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[78.36200000000005, 138.58200000000008]], "isOverall": false, "label": "getUser-Aggregated", "isController": false}, {"data": [[4.0, 154.66666666666666], [6.0, 133.0], [7.0, 148.0], [12.0, 133.0], [13.0, 132.75], [15.0, 260.0], [17.0, 277.5], [19.0, 222.0], [20.0, 134.0], [22.0, 122.5], [24.0, 164.0], [25.0, 161.0], [26.0, 122.0], [27.0, 159.0], [30.0, 128.33333333333334], [31.0, 236.0], [32.0, 156.0], [35.0, 167.0], [34.0, 154.0], [37.0, 120.0], [36.0, 144.0], [39.0, 119.0], [41.0, 109.66666666666667], [40.0, 115.66666666666667], [43.0, 117.6], [42.0, 117.25], [45.0, 97.58333333333331], [44.0, 105.0], [47.0, 118.375], [46.0, 97.5], [49.0, 127.64705882352942], [48.0, 117.46153846153845], [51.0, 119.83333333333333], [50.0, 110.0], [53.0, 122.14285714285714], [52.0, 99.0], [55.0, 125.44444444444444], [54.0, 110.46153846153847], [56.0, 113.80000000000001], [57.0, 119.10000000000001], [58.0, 114.24999999999999], [59.0, 113.16666666666667], [61.0, 120.45454545454545], [60.0, 125.66666666666666], [62.0, 120.8], [63.0, 129.33333333333334], [67.0, 145.5], [66.0, 129.66666666666666], [65.0, 141.10000000000002], [64.0, 133.28571428571428], [70.0, 136.125], [69.0, 130.27272727272728], [68.0, 145.375], [71.0, 144.4], [75.0, 141.0], [74.0, 177.6], [72.0, 146.71428571428572], [73.0, 154.9], [78.0, 135.5], [77.0, 129.0], [76.0, 155.8], [79.0, 136.5], [80.0, 177.66666666666666], [83.0, 133.66666666666666], [82.0, 136.5], [81.0, 139.75], [85.0, 159.83333333333334], [86.0, 144.96], [87.0, 118.0], [84.0, 121.0], [89.0, 127.0], [95.0, 130.0], [94.0, 131.0], [93.0, 144.0], [92.0, 157.0], [98.0, 141.0], [97.0, 136.66666666666666], [103.0, 134.33333333333334], [100.0, 137.75], [107.0, 132.0], [105.0, 147.0], [111.0, 134.0], [108.0, 141.0], [115.0, 123.0], [114.0, 143.0], [117.0, 122.66666666666667], [123.0, 137.33333333333334], [122.0, 139.0], [120.0, 114.0], [126.0, 140.0], [135.0, 118.0], [133.0, 128.0], [132.0, 130.0], [134.0, 129.0], [129.0, 136.0], [128.0, 138.0], [140.0, 113.0], [138.0, 138.0], [139.0, 126.0], [136.0, 114.0], [154.0, 151.50000000000003], [1.0, 181.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[67.94599999999998, 131.66999999999987]], "isOverall": false, "label": "getListOfUser-Aggregated", "isController": false}, {"data": [[14.0, 830.5], [17.0, 843.5], [19.0, 801.5555555555555], [25.0, 757.0], [26.0, 747.5], [27.0, 789.0], [31.0, 726.8], [36.0, 723.25], [39.0, 664.0], [41.0, 732.0], [40.0, 705.3333333333334], [42.0, 701.3333333333334], [43.0, 729.0], [44.0, 678.2857142857143], [45.0, 663.6111111111112], [47.0, 629.5], [46.0, 740.4666666666666], [48.0, 655.5999999999999], [49.0, 678.4285714285713], [51.0, 706.2222222222223], [50.0, 600.6666666666666], [53.0, 721.7857142857143], [52.0, 621.0], [55.0, 828.0], [54.0, 647.0], [56.0, 1008.9411764705881], [57.0, 955.1428571428572], [58.0, 787.3157894736843], [59.0, 691.0], [61.0, 941.0], [60.0, 774.5], [62.0, 1298.5], [63.0, 832.3749999999999], [67.0, 887.6521739130435], [65.0, 1130.3333333333333], [64.0, 1826.0], [66.0, 800.0], [71.0, 1342.3], [70.0, 1038.909090909091], [68.0, 827.25], [69.0, 762.0], [73.0, 978.4], [72.0, 885.6666666666666], [74.0, 766.25], [79.0, 803.0], [78.0, 848.25], [83.0, 786.6666666666666], [82.0, 1385.0], [80.0, 807.0], [87.0, 1120.3333333333333], [86.0, 878.269230769231], [84.0, 800.25], [85.0, 860.0], [129.0, 2280.8387096774195], [154.0, 1950.7228915662656]], "isOverall": false, "label": "register", "isController": false}, {"data": [[78.84600000000012, 1106.8499999999992]], "isOverall": false, "label": "register-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 154.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4975.0, "minX": 1.66745826E12, "maxY": 28197.833333333332, "series": [{"data": [[1.66745826E12, 28197.833333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66745826E12, 4975.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745826E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 131.66999999999987, "minX": 1.66745826E12, "maxY": 1106.8499999999992, "series": [{"data": [[1.66745826E12, 138.58200000000008]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[1.66745826E12, 131.66999999999987]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[1.66745826E12, 1106.8499999999992]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745826E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 131.3739999999998, "minX": 1.66745826E12, "maxY": 1106.7439999999986, "series": [{"data": [[1.66745826E12, 138.52399999999986]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[1.66745826E12, 131.3739999999998]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[1.66745826E12, 1106.7439999999986]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745826E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66745826E12, "maxY": 586.6100000000001, "series": [{"data": [[1.66745826E12, 0.0]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[1.66745826E12, 0.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[1.66745826E12, 586.6100000000001]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745826E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 72.0, "minX": 1.66745826E12, "maxY": 3316.0, "series": [{"data": [[1.66745826E12, 3316.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66745826E12, 72.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66745826E12, 866.4000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66745826E12, 2996.3800000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66745826E12, 153.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.66745826E12, 1913.3000000000006]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745826E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 124.5, "minX": 31.0, "maxY": 2560.0, "series": [{"data": [[138.0, 140.5], [69.0, 181.0], [146.0, 156.0], [145.0, 145.0], [367.0, 166.0], [197.0, 124.5], [210.0, 147.0], [31.0, 2560.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 367.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 124.5, "minX": 31.0, "maxY": 2560.0, "series": [{"data": [[138.0, 140.0], [69.0, 181.0], [146.0, 156.0], [145.0, 145.0], [367.0, 165.0], [197.0, 124.5], [210.0, 147.0], [31.0, 2560.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 367.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.66745826E12, "maxY": 25.0, "series": [{"data": [[1.66745826E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745826E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.66745826E12, "maxY": 25.0, "series": [{"data": [[1.66745826E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745826E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.66745826E12, "maxY": 8.333333333333334, "series": [{"data": [[1.66745826E12, 8.333333333333334]], "isOverall": false, "label": "register-success", "isController": false}, {"data": [[1.66745826E12, 8.333333333333334]], "isOverall": false, "label": "getUser-success", "isController": false}, {"data": [[1.66745826E12, 8.333333333333334]], "isOverall": false, "label": "getListOfUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745826E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.66745826E12, "maxY": 25.0, "series": [{"data": [[1.66745826E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745826E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

