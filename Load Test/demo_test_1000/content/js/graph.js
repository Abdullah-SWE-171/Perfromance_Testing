/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 75.0, "minX": 0.0, "maxY": 9414.0, "series": [{"data": [[0.0, 75.0], [0.1, 79.0], [0.2, 79.0], [0.3, 79.0], [0.4, 80.0], [0.5, 81.0], [0.6, 81.0], [0.7, 82.0], [0.8, 82.0], [0.9, 82.0], [1.0, 82.0], [1.1, 82.0], [1.2, 83.0], [1.3, 83.0], [1.4, 84.0], [1.5, 85.0], [1.6, 85.0], [1.7, 85.0], [1.8, 86.0], [1.9, 86.0], [2.0, 86.0], [2.1, 86.0], [2.2, 86.0], [2.3, 87.0], [2.4, 87.0], [2.5, 87.0], [2.6, 87.0], [2.7, 87.0], [2.8, 87.0], [2.9, 87.0], [3.0, 87.0], [3.1, 87.0], [3.2, 88.0], [3.3, 88.0], [3.4, 88.0], [3.5, 88.0], [3.6, 89.0], [3.7, 89.0], [3.8, 89.0], [3.9, 89.0], [4.0, 89.0], [4.1, 89.0], [4.2, 89.0], [4.3, 89.0], [4.4, 89.0], [4.5, 90.0], [4.6, 90.0], [4.7, 90.0], [4.8, 90.0], [4.9, 90.0], [5.0, 90.0], [5.1, 91.0], [5.2, 91.0], [5.3, 91.0], [5.4, 91.0], [5.5, 91.0], [5.6, 91.0], [5.7, 91.0], [5.8, 91.0], [5.9, 91.0], [6.0, 91.0], [6.1, 91.0], [6.2, 92.0], [6.3, 92.0], [6.4, 92.0], [6.5, 92.0], [6.6, 92.0], [6.7, 92.0], [6.8, 93.0], [6.9, 93.0], [7.0, 93.0], [7.1, 93.0], [7.2, 93.0], [7.3, 93.0], [7.4, 93.0], [7.5, 93.0], [7.6, 93.0], [7.7, 94.0], [7.8, 94.0], [7.9, 94.0], [8.0, 94.0], [8.1, 94.0], [8.2, 94.0], [8.3, 94.0], [8.4, 94.0], [8.5, 95.0], [8.6, 95.0], [8.7, 95.0], [8.8, 95.0], [8.9, 95.0], [9.0, 95.0], [9.1, 95.0], [9.2, 95.0], [9.3, 95.0], [9.4, 95.0], [9.5, 95.0], [9.6, 96.0], [9.7, 96.0], [9.8, 96.0], [9.9, 96.0], [10.0, 96.0], [10.1, 96.0], [10.2, 96.0], [10.3, 96.0], [10.4, 96.0], [10.5, 96.0], [10.6, 97.0], [10.7, 97.0], [10.8, 97.0], [10.9, 97.0], [11.0, 97.0], [11.1, 97.0], [11.2, 97.0], [11.3, 97.0], [11.4, 97.0], [11.5, 97.0], [11.6, 97.0], [11.7, 98.0], [11.8, 98.0], [11.9, 98.0], [12.0, 98.0], [12.1, 98.0], [12.2, 98.0], [12.3, 98.0], [12.4, 98.0], [12.5, 98.0], [12.6, 98.0], [12.7, 98.0], [12.8, 98.0], [12.9, 98.0], [13.0, 98.0], [13.1, 98.0], [13.2, 98.0], [13.3, 98.0], [13.4, 99.0], [13.5, 99.0], [13.6, 99.0], [13.7, 99.0], [13.8, 99.0], [13.9, 99.0], [14.0, 99.0], [14.1, 99.0], [14.2, 99.0], [14.3, 99.0], [14.4, 99.0], [14.5, 99.0], [14.6, 99.0], [14.7, 99.0], [14.8, 99.0], [14.9, 100.0], [15.0, 100.0], [15.1, 100.0], [15.2, 100.0], [15.3, 100.0], [15.4, 100.0], [15.5, 100.0], [15.6, 100.0], [15.7, 100.0], [15.8, 100.0], [15.9, 100.0], [16.0, 101.0], [16.1, 101.0], [16.2, 101.0], [16.3, 101.0], [16.4, 101.0], [16.5, 101.0], [16.6, 101.0], [16.7, 101.0], [16.8, 101.0], [16.9, 101.0], [17.0, 101.0], [17.1, 101.0], [17.2, 101.0], [17.3, 101.0], [17.4, 101.0], [17.5, 101.0], [17.6, 101.0], [17.7, 101.0], [17.8, 101.0], [17.9, 101.0], [18.0, 101.0], [18.1, 102.0], [18.2, 102.0], [18.3, 102.0], [18.4, 102.0], [18.5, 102.0], [18.6, 102.0], [18.7, 102.0], [18.8, 102.0], [18.9, 102.0], [19.0, 102.0], [19.1, 102.0], [19.2, 102.0], [19.3, 102.0], [19.4, 102.0], [19.5, 102.0], [19.6, 102.0], [19.7, 102.0], [19.8, 102.0], [19.9, 103.0], [20.0, 103.0], [20.1, 103.0], [20.2, 103.0], [20.3, 103.0], [20.4, 103.0], [20.5, 103.0], [20.6, 103.0], [20.7, 103.0], [20.8, 103.0], [20.9, 103.0], [21.0, 103.0], [21.1, 103.0], [21.2, 103.0], [21.3, 103.0], [21.4, 103.0], [21.5, 103.0], [21.6, 103.0], [21.7, 104.0], [21.8, 104.0], [21.9, 104.0], [22.0, 104.0], [22.1, 104.0], [22.2, 104.0], [22.3, 104.0], [22.4, 104.0], [22.5, 104.0], [22.6, 104.0], [22.7, 104.0], [22.8, 104.0], [22.9, 104.0], [23.0, 105.0], [23.1, 105.0], [23.2, 105.0], [23.3, 105.0], [23.4, 105.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 105.0], [23.9, 105.0], [24.0, 106.0], [24.1, 106.0], [24.2, 106.0], [24.3, 106.0], [24.4, 106.0], [24.5, 106.0], [24.6, 106.0], [24.7, 106.0], [24.8, 106.0], [24.9, 106.0], [25.0, 106.0], [25.1, 106.0], [25.2, 106.0], [25.3, 106.0], [25.4, 106.0], [25.5, 106.0], [25.6, 106.0], [25.7, 106.0], [25.8, 106.0], [25.9, 106.0], [26.0, 107.0], [26.1, 107.0], [26.2, 107.0], [26.3, 107.0], [26.4, 107.0], [26.5, 107.0], [26.6, 107.0], [26.7, 107.0], [26.8, 107.0], [26.9, 107.0], [27.0, 107.0], [27.1, 107.0], [27.2, 107.0], [27.3, 107.0], [27.4, 107.0], [27.5, 107.0], [27.6, 107.0], [27.7, 107.0], [27.8, 107.0], [27.9, 108.0], [28.0, 108.0], [28.1, 108.0], [28.2, 108.0], [28.3, 108.0], [28.4, 108.0], [28.5, 108.0], [28.6, 108.0], [28.7, 108.0], [28.8, 108.0], [28.9, 108.0], [29.0, 108.0], [29.1, 108.0], [29.2, 108.0], [29.3, 108.0], [29.4, 108.0], [29.5, 108.0], [29.6, 108.0], [29.7, 109.0], [29.8, 109.0], [29.9, 109.0], [30.0, 109.0], [30.1, 109.0], [30.2, 109.0], [30.3, 109.0], [30.4, 109.0], [30.5, 109.0], [30.6, 109.0], [30.7, 109.0], [30.8, 109.0], [30.9, 109.0], [31.0, 109.0], [31.1, 109.0], [31.2, 109.0], [31.3, 109.0], [31.4, 109.0], [31.5, 109.0], [31.6, 109.0], [31.7, 109.0], [31.8, 109.0], [31.9, 109.0], [32.0, 110.0], [32.1, 110.0], [32.2, 110.0], [32.3, 110.0], [32.4, 110.0], [32.5, 110.0], [32.6, 110.0], [32.7, 110.0], [32.8, 110.0], [32.9, 110.0], [33.0, 110.0], [33.1, 110.0], [33.2, 110.0], [33.3, 111.0], [33.4, 111.0], [33.5, 111.0], [33.6, 111.0], [33.7, 111.0], [33.8, 111.0], [33.9, 111.0], [34.0, 111.0], [34.1, 111.0], [34.2, 111.0], [34.3, 111.0], [34.4, 111.0], [34.5, 111.0], [34.6, 111.0], [34.7, 111.0], [34.8, 111.0], [34.9, 112.0], [35.0, 112.0], [35.1, 112.0], [35.2, 112.0], [35.3, 112.0], [35.4, 112.0], [35.5, 112.0], [35.6, 112.0], [35.7, 112.0], [35.8, 112.0], [35.9, 112.0], [36.0, 112.0], [36.1, 112.0], [36.2, 112.0], [36.3, 112.0], [36.4, 112.0], [36.5, 112.0], [36.6, 113.0], [36.7, 113.0], [36.8, 113.0], [36.9, 113.0], [37.0, 113.0], [37.1, 113.0], [37.2, 113.0], [37.3, 113.0], [37.4, 113.0], [37.5, 113.0], [37.6, 113.0], [37.7, 113.0], [37.8, 113.0], [37.9, 113.0], [38.0, 113.0], [38.1, 114.0], [38.2, 114.0], [38.3, 114.0], [38.4, 114.0], [38.5, 114.0], [38.6, 114.0], [38.7, 114.0], [38.8, 114.0], [38.9, 114.0], [39.0, 114.0], [39.1, 114.0], [39.2, 114.0], [39.3, 114.0], [39.4, 115.0], [39.5, 115.0], [39.6, 115.0], [39.7, 115.0], [39.8, 115.0], [39.9, 115.0], [40.0, 115.0], [40.1, 115.0], [40.2, 115.0], [40.3, 115.0], [40.4, 115.0], [40.5, 115.0], [40.6, 115.0], [40.7, 115.0], [40.8, 115.0], [40.9, 115.0], [41.0, 115.0], [41.1, 115.0], [41.2, 115.0], [41.3, 115.0], [41.4, 115.0], [41.5, 115.0], [41.6, 116.0], [41.7, 116.0], [41.8, 116.0], [41.9, 116.0], [42.0, 116.0], [42.1, 116.0], [42.2, 116.0], [42.3, 116.0], [42.4, 116.0], [42.5, 116.0], [42.6, 116.0], [42.7, 116.0], [42.8, 116.0], [42.9, 116.0], [43.0, 116.0], [43.1, 116.0], [43.2, 116.0], [43.3, 117.0], [43.4, 117.0], [43.5, 117.0], [43.6, 117.0], [43.7, 117.0], [43.8, 117.0], [43.9, 117.0], [44.0, 117.0], [44.1, 117.0], [44.2, 117.0], [44.3, 117.0], [44.4, 117.0], [44.5, 117.0], [44.6, 117.0], [44.7, 117.0], [44.8, 117.0], [44.9, 117.0], [45.0, 118.0], [45.1, 118.0], [45.2, 118.0], [45.3, 118.0], [45.4, 118.0], [45.5, 118.0], [45.6, 118.0], [45.7, 118.0], [45.8, 118.0], [45.9, 118.0], [46.0, 118.0], [46.1, 118.0], [46.2, 118.0], [46.3, 118.0], [46.4, 118.0], [46.5, 118.0], [46.6, 118.0], [46.7, 118.0], [46.8, 119.0], [46.9, 119.0], [47.0, 119.0], [47.1, 119.0], [47.2, 119.0], [47.3, 119.0], [47.4, 119.0], [47.5, 119.0], [47.6, 119.0], [47.7, 119.0], [47.8, 119.0], [47.9, 119.0], [48.0, 119.0], [48.1, 119.0], [48.2, 119.0], [48.3, 119.0], [48.4, 119.0], [48.5, 119.0], [48.6, 120.0], [48.7, 120.0], [48.8, 120.0], [48.9, 120.0], [49.0, 120.0], [49.1, 120.0], [49.2, 120.0], [49.3, 120.0], [49.4, 120.0], [49.5, 120.0], [49.6, 120.0], [49.7, 120.0], [49.8, 120.0], [49.9, 120.0], [50.0, 120.0], [50.1, 120.0], [50.2, 120.0], [50.3, 120.0], [50.4, 121.0], [50.5, 121.0], [50.6, 121.0], [50.7, 121.0], [50.8, 121.0], [50.9, 121.0], [51.0, 121.0], [51.1, 121.0], [51.2, 121.0], [51.3, 121.0], [51.4, 121.0], [51.5, 121.0], [51.6, 121.0], [51.7, 121.0], [51.8, 121.0], [51.9, 121.0], [52.0, 121.0], [52.1, 121.0], [52.2, 122.0], [52.3, 122.0], [52.4, 122.0], [52.5, 122.0], [52.6, 122.0], [52.7, 122.0], [52.8, 122.0], [52.9, 122.0], [53.0, 122.0], [53.1, 122.0], [53.2, 122.0], [53.3, 122.0], [53.4, 122.0], [53.5, 122.0], [53.6, 122.0], [53.7, 122.0], [53.8, 122.0], [53.9, 122.0], [54.0, 122.0], [54.1, 122.0], [54.2, 122.0], [54.3, 122.0], [54.4, 122.0], [54.5, 122.0], [54.6, 122.0], [54.7, 123.0], [54.8, 123.0], [54.9, 123.0], [55.0, 123.0], [55.1, 123.0], [55.2, 123.0], [55.3, 123.0], [55.4, 123.0], [55.5, 123.0], [55.6, 123.0], [55.7, 123.0], [55.8, 123.0], [55.9, 123.0], [56.0, 123.0], [56.1, 123.0], [56.2, 123.0], [56.3, 123.0], [56.4, 123.0], [56.5, 123.0], [56.6, 123.0], [56.7, 123.0], [56.8, 123.0], [56.9, 124.0], [57.0, 124.0], [57.1, 124.0], [57.2, 124.0], [57.3, 124.0], [57.4, 124.0], [57.5, 124.0], [57.6, 124.0], [57.7, 124.0], [57.8, 124.0], [57.9, 124.0], [58.0, 124.0], [58.1, 124.0], [58.2, 124.0], [58.3, 124.0], [58.4, 124.0], [58.5, 124.0], [58.6, 124.0], [58.7, 124.0], [58.8, 124.0], [58.9, 125.0], [59.0, 125.0], [59.1, 125.0], [59.2, 125.0], [59.3, 125.0], [59.4, 125.0], [59.5, 125.0], [59.6, 125.0], [59.7, 125.0], [59.8, 125.0], [59.9, 125.0], [60.0, 125.0], [60.1, 125.0], [60.2, 125.0], [60.3, 125.0], [60.4, 125.0], [60.5, 125.0], [60.6, 125.0], [60.7, 125.0], [60.8, 125.0], [60.9, 126.0], [61.0, 126.0], [61.1, 126.0], [61.2, 126.0], [61.3, 126.0], [61.4, 126.0], [61.5, 126.0], [61.6, 126.0], [61.7, 126.0], [61.8, 126.0], [61.9, 126.0], [62.0, 126.0], [62.1, 126.0], [62.2, 126.0], [62.3, 126.0], [62.4, 127.0], [62.5, 127.0], [62.6, 127.0], [62.7, 127.0], [62.8, 127.0], [62.9, 127.0], [63.0, 127.0], [63.1, 127.0], [63.2, 127.0], [63.3, 127.0], [63.4, 127.0], [63.5, 127.0], [63.6, 127.0], [63.7, 127.0], [63.8, 127.0], [63.9, 128.0], [64.0, 128.0], [64.1, 128.0], [64.2, 128.0], [64.3, 128.0], [64.4, 128.0], [64.5, 128.0], [64.6, 128.0], [64.7, 128.0], [64.8, 128.0], [64.9, 128.0], [65.0, 128.0], [65.1, 128.0], [65.2, 129.0], [65.3, 129.0], [65.4, 129.0], [65.5, 129.0], [65.6, 129.0], [65.7, 129.0], [65.8, 129.0], [65.9, 129.0], [66.0, 129.0], [66.1, 130.0], [66.2, 130.0], [66.3, 130.0], [66.4, 130.0], [66.5, 130.0], [66.6, 130.0], [66.7, 130.0], [66.8, 130.0], [66.9, 130.0], [67.0, 130.0], [67.1, 130.0], [67.2, 130.0], [67.3, 130.0], [67.4, 130.0], [67.5, 131.0], [67.6, 131.0], [67.7, 131.0], [67.8, 131.0], [67.9, 131.0], [68.0, 131.0], [68.1, 131.0], [68.2, 131.0], [68.3, 131.0], [68.4, 131.0], [68.5, 132.0], [68.6, 132.0], [68.7, 132.0], [68.8, 132.0], [68.9, 132.0], [69.0, 132.0], [69.1, 132.0], [69.2, 132.0], [69.3, 132.0], [69.4, 132.0], [69.5, 132.0], [69.6, 133.0], [69.7, 133.0], [69.8, 133.0], [69.9, 133.0], [70.0, 133.0], [70.1, 133.0], [70.2, 133.0], [70.3, 133.0], [70.4, 133.0], [70.5, 133.0], [70.6, 133.0], [70.7, 133.0], [70.8, 133.0], [70.9, 134.0], [71.0, 134.0], [71.1, 134.0], [71.2, 134.0], [71.3, 134.0], [71.4, 134.0], [71.5, 134.0], [71.6, 134.0], [71.7, 134.0], [71.8, 134.0], [71.9, 135.0], [72.0, 135.0], [72.1, 135.0], [72.2, 135.0], [72.3, 135.0], [72.4, 135.0], [72.5, 135.0], [72.6, 135.0], [72.7, 135.0], [72.8, 135.0], [72.9, 135.0], [73.0, 135.0], [73.1, 135.0], [73.2, 136.0], [73.3, 136.0], [73.4, 136.0], [73.5, 136.0], [73.6, 136.0], [73.7, 136.0], [73.8, 136.0], [73.9, 136.0], [74.0, 136.0], [74.1, 136.0], [74.2, 136.0], [74.3, 136.0], [74.4, 136.0], [74.5, 136.0], [74.6, 136.0], [74.7, 137.0], [74.8, 137.0], [74.9, 137.0], [75.0, 137.0], [75.1, 137.0], [75.2, 137.0], [75.3, 137.0], [75.4, 137.0], [75.5, 137.0], [75.6, 137.0], [75.7, 137.0], [75.8, 137.0], [75.9, 137.0], [76.0, 137.0], [76.1, 138.0], [76.2, 138.0], [76.3, 138.0], [76.4, 138.0], [76.5, 138.0], [76.6, 138.0], [76.7, 138.0], [76.8, 138.0], [76.9, 139.0], [77.0, 139.0], [77.1, 139.0], [77.2, 139.0], [77.3, 139.0], [77.4, 139.0], [77.5, 139.0], [77.6, 139.0], [77.7, 139.0], [77.8, 139.0], [77.9, 140.0], [78.0, 140.0], [78.1, 140.0], [78.2, 140.0], [78.3, 140.0], [78.4, 140.0], [78.5, 140.0], [78.6, 140.0], [78.7, 140.0], [78.8, 140.0], [78.9, 141.0], [79.0, 141.0], [79.1, 141.0], [79.2, 141.0], [79.3, 141.0], [79.4, 141.0], [79.5, 141.0], [79.6, 141.0], [79.7, 141.0], [79.8, 141.0], [79.9, 141.0], [80.0, 141.0], [80.1, 141.0], [80.2, 141.0], [80.3, 141.0], [80.4, 142.0], [80.5, 142.0], [80.6, 142.0], [80.7, 142.0], [80.8, 142.0], [80.9, 142.0], [81.0, 142.0], [81.1, 142.0], [81.2, 142.0], [81.3, 142.0], [81.4, 142.0], [81.5, 143.0], [81.6, 143.0], [81.7, 143.0], [81.8, 143.0], [81.9, 143.0], [82.0, 143.0], [82.1, 143.0], [82.2, 143.0], [82.3, 143.0], [82.4, 143.0], [82.5, 143.0], [82.6, 143.0], [82.7, 143.0], [82.8, 143.0], [82.9, 143.0], [83.0, 143.0], [83.1, 144.0], [83.2, 144.0], [83.3, 144.0], [83.4, 144.0], [83.5, 144.0], [83.6, 144.0], [83.7, 144.0], [83.8, 144.0], [83.9, 144.0], [84.0, 144.0], [84.1, 145.0], [84.2, 145.0], [84.3, 145.0], [84.4, 145.0], [84.5, 145.0], [84.6, 145.0], [84.7, 145.0], [84.8, 145.0], [84.9, 146.0], [85.0, 146.0], [85.1, 146.0], [85.2, 146.0], [85.3, 146.0], [85.4, 146.0], [85.5, 146.0], [85.6, 146.0], [85.7, 146.0], [85.8, 146.0], [85.9, 146.0], [86.0, 146.0], [86.1, 147.0], [86.2, 147.0], [86.3, 148.0], [86.4, 148.0], [86.5, 148.0], [86.6, 148.0], [86.7, 149.0], [86.8, 149.0], [86.9, 149.0], [87.0, 149.0], [87.1, 149.0], [87.2, 149.0], [87.3, 150.0], [87.4, 150.0], [87.5, 150.0], [87.6, 150.0], [87.7, 151.0], [87.8, 151.0], [87.9, 151.0], [88.0, 151.0], [88.1, 151.0], [88.2, 151.0], [88.3, 152.0], [88.4, 152.0], [88.5, 152.0], [88.6, 152.0], [88.7, 152.0], [88.8, 152.0], [88.9, 152.0], [89.0, 153.0], [89.1, 153.0], [89.2, 153.0], [89.3, 153.0], [89.4, 153.0], [89.5, 153.0], [89.6, 153.0], [89.7, 153.0], [89.8, 154.0], [89.9, 154.0], [90.0, 154.0], [90.1, 154.0], [90.2, 154.0], [90.3, 154.0], [90.4, 155.0], [90.5, 155.0], [90.6, 155.0], [90.7, 155.0], [90.8, 156.0], [90.9, 156.0], [91.0, 156.0], [91.1, 156.0], [91.2, 157.0], [91.3, 157.0], [91.4, 157.0], [91.5, 157.0], [91.6, 157.0], [91.7, 157.0], [91.8, 157.0], [91.9, 158.0], [92.0, 158.0], [92.1, 158.0], [92.2, 159.0], [92.3, 159.0], [92.4, 159.0], [92.5, 159.0], [92.6, 159.0], [92.7, 160.0], [92.8, 160.0], [92.9, 160.0], [93.0, 160.0], [93.1, 160.0], [93.2, 161.0], [93.3, 161.0], [93.4, 161.0], [93.5, 161.0], [93.6, 161.0], [93.7, 162.0], [93.8, 162.0], [93.9, 163.0], [94.0, 163.0], [94.1, 163.0], [94.2, 166.0], [94.3, 166.0], [94.4, 166.0], [94.5, 166.0], [94.6, 166.0], [94.7, 167.0], [94.8, 167.0], [94.9, 167.0], [95.0, 169.0], [95.1, 169.0], [95.2, 169.0], [95.3, 169.0], [95.4, 170.0], [95.5, 171.0], [95.6, 171.0], [95.7, 171.0], [95.8, 172.0], [95.9, 173.0], [96.0, 174.0], [96.1, 174.0], [96.2, 175.0], [96.3, 175.0], [96.4, 176.0], [96.5, 176.0], [96.6, 176.0], [96.7, 176.0], [96.8, 177.0], [96.9, 178.0], [97.0, 178.0], [97.1, 178.0], [97.2, 179.0], [97.3, 179.0], [97.4, 182.0], [97.5, 182.0], [97.6, 183.0], [97.7, 185.0], [97.8, 186.0], [97.9, 186.0], [98.0, 188.0], [98.1, 188.0], [98.2, 192.0], [98.3, 193.0], [98.4, 198.0], [98.5, 198.0], [98.6, 213.0], [98.7, 216.0], [98.8, 243.0], [98.9, 301.0], [99.0, 306.0], [99.1, 316.0], [99.2, 403.0], [99.3, 416.0], [99.4, 444.0], [99.5, 463.0], [99.6, 479.0], [99.7, 508.0], [99.8, 553.0], [99.9, 565.0]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[0.0, 77.0], [0.1, 80.0], [0.2, 80.0], [0.3, 80.0], [0.4, 82.0], [0.5, 84.0], [0.6, 84.0], [0.7, 85.0], [0.8, 86.0], [0.9, 86.0], [1.0, 86.0], [1.1, 87.0], [1.2, 88.0], [1.3, 88.0], [1.4, 88.0], [1.5, 88.0], [1.6, 88.0], [1.7, 89.0], [1.8, 89.0], [1.9, 89.0], [2.0, 90.0], [2.1, 90.0], [2.2, 90.0], [2.3, 90.0], [2.4, 90.0], [2.5, 90.0], [2.6, 90.0], [2.7, 91.0], [2.8, 91.0], [2.9, 91.0], [3.0, 91.0], [3.1, 91.0], [3.2, 91.0], [3.3, 91.0], [3.4, 91.0], [3.5, 91.0], [3.6, 92.0], [3.7, 92.0], [3.8, 92.0], [3.9, 92.0], [4.0, 92.0], [4.1, 93.0], [4.2, 93.0], [4.3, 93.0], [4.4, 93.0], [4.5, 93.0], [4.6, 93.0], [4.7, 93.0], [4.8, 93.0], [4.9, 93.0], [5.0, 93.0], [5.1, 93.0], [5.2, 93.0], [5.3, 93.0], [5.4, 93.0], [5.5, 93.0], [5.6, 94.0], [5.7, 94.0], [5.8, 94.0], [5.9, 94.0], [6.0, 94.0], [6.1, 94.0], [6.2, 94.0], [6.3, 94.0], [6.4, 94.0], [6.5, 94.0], [6.6, 94.0], [6.7, 95.0], [6.8, 95.0], [6.9, 95.0], [7.0, 95.0], [7.1, 95.0], [7.2, 95.0], [7.3, 96.0], [7.4, 96.0], [7.5, 96.0], [7.6, 96.0], [7.7, 96.0], [7.8, 96.0], [7.9, 96.0], [8.0, 96.0], [8.1, 96.0], [8.2, 97.0], [8.3, 97.0], [8.4, 97.0], [8.5, 97.0], [8.6, 97.0], [8.7, 97.0], [8.8, 97.0], [8.9, 97.0], [9.0, 97.0], [9.1, 97.0], [9.2, 97.0], [9.3, 97.0], [9.4, 97.0], [9.5, 97.0], [9.6, 97.0], [9.7, 97.0], [9.8, 97.0], [9.9, 98.0], [10.0, 98.0], [10.1, 98.0], [10.2, 98.0], [10.3, 98.0], [10.4, 98.0], [10.5, 98.0], [10.6, 98.0], [10.7, 98.0], [10.8, 98.0], [10.9, 99.0], [11.0, 99.0], [11.1, 99.0], [11.2, 99.0], [11.3, 99.0], [11.4, 99.0], [11.5, 99.0], [11.6, 99.0], [11.7, 99.0], [11.8, 99.0], [11.9, 99.0], [12.0, 99.0], [12.1, 99.0], [12.2, 99.0], [12.3, 99.0], [12.4, 99.0], [12.5, 100.0], [12.6, 100.0], [12.7, 100.0], [12.8, 100.0], [12.9, 100.0], [13.0, 100.0], [13.1, 100.0], [13.2, 100.0], [13.3, 100.0], [13.4, 101.0], [13.5, 101.0], [13.6, 101.0], [13.7, 101.0], [13.8, 101.0], [13.9, 101.0], [14.0, 101.0], [14.1, 101.0], [14.2, 101.0], [14.3, 101.0], [14.4, 101.0], [14.5, 102.0], [14.6, 102.0], [14.7, 102.0], [14.8, 102.0], [14.9, 102.0], [15.0, 102.0], [15.1, 102.0], [15.2, 102.0], [15.3, 102.0], [15.4, 102.0], [15.5, 103.0], [15.6, 103.0], [15.7, 103.0], [15.8, 103.0], [15.9, 103.0], [16.0, 103.0], [16.1, 103.0], [16.2, 103.0], [16.3, 103.0], [16.4, 103.0], [16.5, 103.0], [16.6, 103.0], [16.7, 103.0], [16.8, 103.0], [16.9, 103.0], [17.0, 103.0], [17.1, 103.0], [17.2, 103.0], [17.3, 104.0], [17.4, 104.0], [17.5, 104.0], [17.6, 104.0], [17.7, 104.0], [17.8, 104.0], [17.9, 104.0], [18.0, 104.0], [18.1, 104.0], [18.2, 104.0], [18.3, 104.0], [18.4, 104.0], [18.5, 104.0], [18.6, 104.0], [18.7, 104.0], [18.8, 104.0], [18.9, 105.0], [19.0, 105.0], [19.1, 105.0], [19.2, 105.0], [19.3, 105.0], [19.4, 105.0], [19.5, 105.0], [19.6, 105.0], [19.7, 105.0], [19.8, 105.0], [19.9, 105.0], [20.0, 105.0], [20.1, 105.0], [20.2, 105.0], [20.3, 105.0], [20.4, 106.0], [20.5, 106.0], [20.6, 106.0], [20.7, 106.0], [20.8, 106.0], [20.9, 106.0], [21.0, 106.0], [21.1, 106.0], [21.2, 106.0], [21.3, 106.0], [21.4, 106.0], [21.5, 106.0], [21.6, 106.0], [21.7, 107.0], [21.8, 107.0], [21.9, 107.0], [22.0, 107.0], [22.1, 107.0], [22.2, 107.0], [22.3, 107.0], [22.4, 107.0], [22.5, 107.0], [22.6, 107.0], [22.7, 107.0], [22.8, 107.0], [22.9, 107.0], [23.0, 107.0], [23.1, 107.0], [23.2, 107.0], [23.3, 107.0], [23.4, 107.0], [23.5, 107.0], [23.6, 108.0], [23.7, 108.0], [23.8, 108.0], [23.9, 108.0], [24.0, 108.0], [24.1, 108.0], [24.2, 108.0], [24.3, 108.0], [24.4, 108.0], [24.5, 108.0], [24.6, 108.0], [24.7, 108.0], [24.8, 108.0], [24.9, 108.0], [25.0, 108.0], [25.1, 108.0], [25.2, 108.0], [25.3, 108.0], [25.4, 108.0], [25.5, 108.0], [25.6, 108.0], [25.7, 108.0], [25.8, 109.0], [25.9, 109.0], [26.0, 109.0], [26.1, 109.0], [26.2, 109.0], [26.3, 109.0], [26.4, 109.0], [26.5, 109.0], [26.6, 109.0], [26.7, 109.0], [26.8, 109.0], [26.9, 109.0], [27.0, 109.0], [27.1, 110.0], [27.2, 110.0], [27.3, 110.0], [27.4, 110.0], [27.5, 110.0], [27.6, 110.0], [27.7, 110.0], [27.8, 110.0], [27.9, 110.0], [28.0, 110.0], [28.1, 110.0], [28.2, 110.0], [28.3, 110.0], [28.4, 110.0], [28.5, 110.0], [28.6, 110.0], [28.7, 110.0], [28.8, 110.0], [28.9, 110.0], [29.0, 110.0], [29.1, 110.0], [29.2, 111.0], [29.3, 111.0], [29.4, 111.0], [29.5, 111.0], [29.6, 111.0], [29.7, 111.0], [29.8, 111.0], [29.9, 111.0], [30.0, 111.0], [30.1, 111.0], [30.2, 111.0], [30.3, 111.0], [30.4, 111.0], [30.5, 111.0], [30.6, 111.0], [30.7, 111.0], [30.8, 111.0], [30.9, 111.0], [31.0, 111.0], [31.1, 111.0], [31.2, 112.0], [31.3, 112.0], [31.4, 112.0], [31.5, 112.0], [31.6, 112.0], [31.7, 112.0], [31.8, 112.0], [31.9, 112.0], [32.0, 112.0], [32.1, 112.0], [32.2, 112.0], [32.3, 112.0], [32.4, 112.0], [32.5, 112.0], [32.6, 112.0], [32.7, 112.0], [32.8, 112.0], [32.9, 112.0], [33.0, 112.0], [33.1, 113.0], [33.2, 113.0], [33.3, 113.0], [33.4, 113.0], [33.5, 113.0], [33.6, 113.0], [33.7, 113.0], [33.8, 113.0], [33.9, 113.0], [34.0, 113.0], [34.1, 113.0], [34.2, 113.0], [34.3, 113.0], [34.4, 113.0], [34.5, 113.0], [34.6, 113.0], [34.7, 113.0], [34.8, 113.0], [34.9, 113.0], [35.0, 113.0], [35.1, 113.0], [35.2, 113.0], [35.3, 113.0], [35.4, 113.0], [35.5, 113.0], [35.6, 114.0], [35.7, 114.0], [35.8, 114.0], [35.9, 114.0], [36.0, 114.0], [36.1, 114.0], [36.2, 114.0], [36.3, 114.0], [36.4, 114.0], [36.5, 114.0], [36.6, 114.0], [36.7, 114.0], [36.8, 114.0], [36.9, 114.0], [37.0, 114.0], [37.1, 114.0], [37.2, 114.0], [37.3, 114.0], [37.4, 114.0], [37.5, 114.0], [37.6, 115.0], [37.7, 115.0], [37.8, 115.0], [37.9, 115.0], [38.0, 115.0], [38.1, 115.0], [38.2, 115.0], [38.3, 115.0], [38.4, 115.0], [38.5, 115.0], [38.6, 115.0], [38.7, 115.0], [38.8, 115.0], [38.9, 115.0], [39.0, 115.0], [39.1, 115.0], [39.2, 115.0], [39.3, 115.0], [39.4, 115.0], [39.5, 116.0], [39.6, 116.0], [39.7, 116.0], [39.8, 116.0], [39.9, 116.0], [40.0, 116.0], [40.1, 116.0], [40.2, 116.0], [40.3, 116.0], [40.4, 116.0], [40.5, 116.0], [40.6, 116.0], [40.7, 116.0], [40.8, 116.0], [40.9, 116.0], [41.0, 116.0], [41.1, 116.0], [41.2, 116.0], [41.3, 116.0], [41.4, 117.0], [41.5, 117.0], [41.6, 117.0], [41.7, 117.0], [41.8, 117.0], [41.9, 117.0], [42.0, 117.0], [42.1, 117.0], [42.2, 117.0], [42.3, 117.0], [42.4, 117.0], [42.5, 117.0], [42.6, 117.0], [42.7, 117.0], [42.8, 117.0], [42.9, 117.0], [43.0, 117.0], [43.1, 117.0], [43.2, 117.0], [43.3, 118.0], [43.4, 118.0], [43.5, 118.0], [43.6, 118.0], [43.7, 118.0], [43.8, 118.0], [43.9, 118.0], [44.0, 118.0], [44.1, 118.0], [44.2, 118.0], [44.3, 118.0], [44.4, 118.0], [44.5, 118.0], [44.6, 118.0], [44.7, 118.0], [44.8, 118.0], [44.9, 118.0], [45.0, 118.0], [45.1, 118.0], [45.2, 118.0], [45.3, 118.0], [45.4, 118.0], [45.5, 118.0], [45.6, 118.0], [45.7, 119.0], [45.8, 119.0], [45.9, 119.0], [46.0, 119.0], [46.1, 119.0], [46.2, 119.0], [46.3, 119.0], [46.4, 119.0], [46.5, 119.0], [46.6, 119.0], [46.7, 120.0], [46.8, 120.0], [46.9, 120.0], [47.0, 120.0], [47.1, 120.0], [47.2, 120.0], [47.3, 120.0], [47.4, 120.0], [47.5, 120.0], [47.6, 120.0], [47.7, 120.0], [47.8, 120.0], [47.9, 120.0], [48.0, 120.0], [48.1, 120.0], [48.2, 120.0], [48.3, 120.0], [48.4, 120.0], [48.5, 120.0], [48.6, 120.0], [48.7, 120.0], [48.8, 120.0], [48.9, 120.0], [49.0, 120.0], [49.1, 121.0], [49.2, 121.0], [49.3, 121.0], [49.4, 121.0], [49.5, 121.0], [49.6, 121.0], [49.7, 121.0], [49.8, 121.0], [49.9, 121.0], [50.0, 121.0], [50.1, 121.0], [50.2, 121.0], [50.3, 121.0], [50.4, 121.0], [50.5, 121.0], [50.6, 121.0], [50.7, 121.0], [50.8, 121.0], [50.9, 121.0], [51.0, 121.0], [51.1, 121.0], [51.2, 121.0], [51.3, 122.0], [51.4, 122.0], [51.5, 122.0], [51.6, 122.0], [51.7, 122.0], [51.8, 122.0], [51.9, 122.0], [52.0, 122.0], [52.1, 122.0], [52.2, 122.0], [52.3, 122.0], [52.4, 122.0], [52.5, 122.0], [52.6, 122.0], [52.7, 122.0], [52.8, 122.0], [52.9, 122.0], [53.0, 122.0], [53.1, 122.0], [53.2, 122.0], [53.3, 122.0], [53.4, 122.0], [53.5, 123.0], [53.6, 123.0], [53.7, 123.0], [53.8, 123.0], [53.9, 123.0], [54.0, 123.0], [54.1, 123.0], [54.2, 123.0], [54.3, 123.0], [54.4, 123.0], [54.5, 123.0], [54.6, 123.0], [54.7, 123.0], [54.8, 123.0], [54.9, 123.0], [55.0, 123.0], [55.1, 123.0], [55.2, 123.0], [55.3, 123.0], [55.4, 123.0], [55.5, 123.0], [55.6, 124.0], [55.7, 124.0], [55.8, 124.0], [55.9, 124.0], [56.0, 124.0], [56.1, 124.0], [56.2, 124.0], [56.3, 124.0], [56.4, 124.0], [56.5, 124.0], [56.6, 124.0], [56.7, 124.0], [56.8, 124.0], [56.9, 124.0], [57.0, 124.0], [57.1, 124.0], [57.2, 124.0], [57.3, 124.0], [57.4, 125.0], [57.5, 125.0], [57.6, 125.0], [57.7, 125.0], [57.8, 125.0], [57.9, 125.0], [58.0, 125.0], [58.1, 125.0], [58.2, 125.0], [58.3, 125.0], [58.4, 125.0], [58.5, 125.0], [58.6, 125.0], [58.7, 125.0], [58.8, 125.0], [58.9, 125.0], [59.0, 125.0], [59.1, 125.0], [59.2, 125.0], [59.3, 125.0], [59.4, 126.0], [59.5, 126.0], [59.6, 126.0], [59.7, 126.0], [59.8, 126.0], [59.9, 126.0], [60.0, 126.0], [60.1, 126.0], [60.2, 126.0], [60.3, 126.0], [60.4, 126.0], [60.5, 126.0], [60.6, 126.0], [60.7, 126.0], [60.8, 126.0], [60.9, 126.0], [61.0, 126.0], [61.1, 126.0], [61.2, 126.0], [61.3, 126.0], [61.4, 126.0], [61.5, 126.0], [61.6, 126.0], [61.7, 126.0], [61.8, 126.0], [61.9, 126.0], [62.0, 126.0], [62.1, 127.0], [62.2, 127.0], [62.3, 127.0], [62.4, 127.0], [62.5, 127.0], [62.6, 127.0], [62.7, 127.0], [62.8, 127.0], [62.9, 127.0], [63.0, 127.0], [63.1, 127.0], [63.2, 127.0], [63.3, 127.0], [63.4, 127.0], [63.5, 127.0], [63.6, 127.0], [63.7, 127.0], [63.8, 127.0], [63.9, 128.0], [64.0, 128.0], [64.1, 128.0], [64.2, 128.0], [64.3, 128.0], [64.4, 128.0], [64.5, 128.0], [64.6, 128.0], [64.7, 128.0], [64.8, 128.0], [64.9, 128.0], [65.0, 128.0], [65.1, 128.0], [65.2, 129.0], [65.3, 129.0], [65.4, 129.0], [65.5, 129.0], [65.6, 129.0], [65.7, 129.0], [65.8, 129.0], [65.9, 129.0], [66.0, 129.0], [66.1, 129.0], [66.2, 129.0], [66.3, 129.0], [66.4, 129.0], [66.5, 129.0], [66.6, 130.0], [66.7, 130.0], [66.8, 130.0], [66.9, 130.0], [67.0, 130.0], [67.1, 130.0], [67.2, 130.0], [67.3, 130.0], [67.4, 130.0], [67.5, 130.0], [67.6, 130.0], [67.7, 131.0], [67.8, 131.0], [67.9, 131.0], [68.0, 131.0], [68.1, 131.0], [68.2, 131.0], [68.3, 131.0], [68.4, 131.0], [68.5, 131.0], [68.6, 131.0], [68.7, 131.0], [68.8, 131.0], [68.9, 132.0], [69.0, 132.0], [69.1, 132.0], [69.2, 132.0], [69.3, 132.0], [69.4, 132.0], [69.5, 132.0], [69.6, 132.0], [69.7, 132.0], [69.8, 132.0], [69.9, 133.0], [70.0, 133.0], [70.1, 133.0], [70.2, 133.0], [70.3, 133.0], [70.4, 133.0], [70.5, 133.0], [70.6, 133.0], [70.7, 133.0], [70.8, 133.0], [70.9, 134.0], [71.0, 134.0], [71.1, 134.0], [71.2, 134.0], [71.3, 134.0], [71.4, 134.0], [71.5, 135.0], [71.6, 135.0], [71.7, 135.0], [71.8, 135.0], [71.9, 135.0], [72.0, 135.0], [72.1, 135.0], [72.2, 135.0], [72.3, 135.0], [72.4, 136.0], [72.5, 136.0], [72.6, 136.0], [72.7, 136.0], [72.8, 136.0], [72.9, 136.0], [73.0, 136.0], [73.1, 136.0], [73.2, 136.0], [73.3, 136.0], [73.4, 136.0], [73.5, 137.0], [73.6, 137.0], [73.7, 137.0], [73.8, 137.0], [73.9, 137.0], [74.0, 137.0], [74.1, 137.0], [74.2, 137.0], [74.3, 137.0], [74.4, 137.0], [74.5, 137.0], [74.6, 138.0], [74.7, 138.0], [74.8, 138.0], [74.9, 138.0], [75.0, 138.0], [75.1, 138.0], [75.2, 138.0], [75.3, 138.0], [75.4, 139.0], [75.5, 139.0], [75.6, 139.0], [75.7, 139.0], [75.8, 139.0], [75.9, 139.0], [76.0, 139.0], [76.1, 139.0], [76.2, 139.0], [76.3, 139.0], [76.4, 139.0], [76.5, 140.0], [76.6, 140.0], [76.7, 140.0], [76.8, 140.0], [76.9, 140.0], [77.0, 140.0], [77.1, 140.0], [77.2, 140.0], [77.3, 141.0], [77.4, 141.0], [77.5, 141.0], [77.6, 141.0], [77.7, 141.0], [77.8, 141.0], [77.9, 141.0], [78.0, 141.0], [78.1, 142.0], [78.2, 142.0], [78.3, 142.0], [78.4, 142.0], [78.5, 142.0], [78.6, 142.0], [78.7, 142.0], [78.8, 142.0], [78.9, 143.0], [79.0, 143.0], [79.1, 143.0], [79.2, 143.0], [79.3, 143.0], [79.4, 143.0], [79.5, 143.0], [79.6, 143.0], [79.7, 143.0], [79.8, 144.0], [79.9, 144.0], [80.0, 144.0], [80.1, 144.0], [80.2, 144.0], [80.3, 144.0], [80.4, 144.0], [80.5, 145.0], [80.6, 145.0], [80.7, 145.0], [80.8, 145.0], [80.9, 145.0], [81.0, 146.0], [81.1, 146.0], [81.2, 146.0], [81.3, 146.0], [81.4, 146.0], [81.5, 146.0], [81.6, 146.0], [81.7, 146.0], [81.8, 146.0], [81.9, 146.0], [82.0, 146.0], [82.1, 146.0], [82.2, 147.0], [82.3, 147.0], [82.4, 147.0], [82.5, 147.0], [82.6, 147.0], [82.7, 148.0], [82.8, 148.0], [82.9, 148.0], [83.0, 149.0], [83.1, 149.0], [83.2, 149.0], [83.3, 149.0], [83.4, 149.0], [83.5, 150.0], [83.6, 150.0], [83.7, 150.0], [83.8, 150.0], [83.9, 150.0], [84.0, 150.0], [84.1, 150.0], [84.2, 151.0], [84.3, 151.0], [84.4, 151.0], [84.5, 152.0], [84.6, 152.0], [84.7, 152.0], [84.8, 152.0], [84.9, 152.0], [85.0, 153.0], [85.1, 153.0], [85.2, 153.0], [85.3, 153.0], [85.4, 153.0], [85.5, 153.0], [85.6, 153.0], [85.7, 154.0], [85.8, 154.0], [85.9, 154.0], [86.0, 154.0], [86.1, 154.0], [86.2, 155.0], [86.3, 155.0], [86.4, 155.0], [86.5, 155.0], [86.6, 155.0], [86.7, 155.0], [86.8, 156.0], [86.9, 156.0], [87.0, 156.0], [87.1, 156.0], [87.2, 156.0], [87.3, 157.0], [87.4, 157.0], [87.5, 157.0], [87.6, 158.0], [87.7, 158.0], [87.8, 158.0], [87.9, 158.0], [88.0, 160.0], [88.1, 160.0], [88.2, 160.0], [88.3, 161.0], [88.4, 161.0], [88.5, 161.0], [88.6, 161.0], [88.7, 162.0], [88.8, 162.0], [88.9, 162.0], [89.0, 162.0], [89.1, 162.0], [89.2, 162.0], [89.3, 163.0], [89.4, 163.0], [89.5, 163.0], [89.6, 163.0], [89.7, 163.0], [89.8, 163.0], [89.9, 165.0], [90.0, 166.0], [90.1, 166.0], [90.2, 167.0], [90.3, 167.0], [90.4, 167.0], [90.5, 168.0], [90.6, 169.0], [90.7, 169.0], [90.8, 170.0], [90.9, 170.0], [91.0, 171.0], [91.1, 171.0], [91.2, 171.0], [91.3, 171.0], [91.4, 171.0], [91.5, 172.0], [91.6, 172.0], [91.7, 173.0], [91.8, 173.0], [91.9, 173.0], [92.0, 173.0], [92.1, 174.0], [92.2, 174.0], [92.3, 174.0], [92.4, 174.0], [92.5, 174.0], [92.6, 175.0], [92.7, 175.0], [92.8, 175.0], [92.9, 176.0], [93.0, 176.0], [93.1, 176.0], [93.2, 176.0], [93.3, 177.0], [93.4, 177.0], [93.5, 177.0], [93.6, 177.0], [93.7, 177.0], [93.8, 177.0], [93.9, 178.0], [94.0, 178.0], [94.1, 178.0], [94.2, 180.0], [94.3, 180.0], [94.4, 180.0], [94.5, 182.0], [94.6, 186.0], [94.7, 187.0], [94.8, 189.0], [94.9, 189.0], [95.0, 190.0], [95.1, 190.0], [95.2, 191.0], [95.3, 192.0], [95.4, 192.0], [95.5, 195.0], [95.6, 195.0], [95.7, 196.0], [95.8, 197.0], [95.9, 198.0], [96.0, 200.0], [96.1, 201.0], [96.2, 217.0], [96.3, 249.0], [96.4, 255.0], [96.5, 260.0], [96.6, 263.0], [96.7, 268.0], [96.8, 288.0], [96.9, 296.0], [97.0, 297.0], [97.1, 300.0], [97.2, 300.0], [97.3, 302.0], [97.4, 302.0], [97.5, 304.0], [97.6, 304.0], [97.7, 329.0], [97.8, 357.0], [97.9, 393.0], [98.0, 417.0], [98.1, 476.0], [98.2, 480.0], [98.3, 524.0], [98.4, 582.0], [98.5, 587.0], [98.6, 624.0], [98.7, 633.0], [98.8, 635.0], [98.9, 645.0], [99.0, 671.0], [99.1, 688.0], [99.2, 694.0], [99.3, 696.0], [99.4, 712.0], [99.5, 718.0], [99.6, 737.0], [99.7, 752.0], [99.8, 762.0], [99.9, 860.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[0.0, 617.0], [0.1, 633.0], [0.2, 636.0], [0.3, 636.0], [0.4, 638.0], [0.5, 638.0], [0.6, 638.0], [0.7, 640.0], [0.8, 642.0], [0.9, 646.0], [1.0, 647.0], [1.1, 648.0], [1.2, 648.0], [1.3, 649.0], [1.4, 649.0], [1.5, 649.0], [1.6, 650.0], [1.7, 650.0], [1.8, 651.0], [1.9, 651.0], [2.0, 652.0], [2.1, 653.0], [2.2, 653.0], [2.3, 653.0], [2.4, 654.0], [2.5, 654.0], [2.6, 654.0], [2.7, 655.0], [2.8, 655.0], [2.9, 657.0], [3.0, 657.0], [3.1, 658.0], [3.2, 658.0], [3.3, 659.0], [3.4, 659.0], [3.5, 659.0], [3.6, 659.0], [3.7, 660.0], [3.8, 662.0], [3.9, 662.0], [4.0, 664.0], [4.1, 666.0], [4.2, 666.0], [4.3, 667.0], [4.4, 668.0], [4.5, 668.0], [4.6, 669.0], [4.7, 669.0], [4.8, 670.0], [4.9, 671.0], [5.0, 671.0], [5.1, 671.0], [5.2, 672.0], [5.3, 672.0], [5.4, 673.0], [5.5, 673.0], [5.6, 673.0], [5.7, 675.0], [5.8, 676.0], [5.9, 676.0], [6.0, 676.0], [6.1, 676.0], [6.2, 676.0], [6.3, 676.0], [6.4, 677.0], [6.5, 677.0], [6.6, 677.0], [6.7, 678.0], [6.8, 678.0], [6.9, 678.0], [7.0, 678.0], [7.1, 678.0], [7.2, 679.0], [7.3, 679.0], [7.4, 679.0], [7.5, 679.0], [7.6, 680.0], [7.7, 681.0], [7.8, 681.0], [7.9, 681.0], [8.0, 681.0], [8.1, 681.0], [8.2, 682.0], [8.3, 682.0], [8.4, 682.0], [8.5, 682.0], [8.6, 683.0], [8.7, 683.0], [8.8, 683.0], [8.9, 684.0], [9.0, 685.0], [9.1, 685.0], [9.2, 685.0], [9.3, 687.0], [9.4, 687.0], [9.5, 687.0], [9.6, 687.0], [9.7, 688.0], [9.8, 688.0], [9.9, 688.0], [10.0, 689.0], [10.1, 689.0], [10.2, 689.0], [10.3, 691.0], [10.4, 691.0], [10.5, 691.0], [10.6, 691.0], [10.7, 691.0], [10.8, 691.0], [10.9, 691.0], [11.0, 692.0], [11.1, 692.0], [11.2, 693.0], [11.3, 693.0], [11.4, 693.0], [11.5, 694.0], [11.6, 694.0], [11.7, 694.0], [11.8, 695.0], [11.9, 695.0], [12.0, 695.0], [12.1, 695.0], [12.2, 696.0], [12.3, 696.0], [12.4, 696.0], [12.5, 697.0], [12.6, 697.0], [12.7, 697.0], [12.8, 697.0], [12.9, 697.0], [13.0, 698.0], [13.1, 698.0], [13.2, 698.0], [13.3, 698.0], [13.4, 698.0], [13.5, 698.0], [13.6, 699.0], [13.7, 700.0], [13.8, 700.0], [13.9, 700.0], [14.0, 701.0], [14.1, 702.0], [14.2, 702.0], [14.3, 702.0], [14.4, 703.0], [14.5, 704.0], [14.6, 704.0], [14.7, 704.0], [14.8, 705.0], [14.9, 705.0], [15.0, 706.0], [15.1, 708.0], [15.2, 708.0], [15.3, 709.0], [15.4, 710.0], [15.5, 710.0], [15.6, 710.0], [15.7, 710.0], [15.8, 710.0], [15.9, 711.0], [16.0, 711.0], [16.1, 712.0], [16.2, 713.0], [16.3, 713.0], [16.4, 714.0], [16.5, 714.0], [16.6, 714.0], [16.7, 714.0], [16.8, 715.0], [16.9, 715.0], [17.0, 716.0], [17.1, 716.0], [17.2, 716.0], [17.3, 717.0], [17.4, 717.0], [17.5, 718.0], [17.6, 719.0], [17.7, 719.0], [17.8, 719.0], [17.9, 719.0], [18.0, 720.0], [18.1, 720.0], [18.2, 720.0], [18.3, 720.0], [18.4, 720.0], [18.5, 721.0], [18.6, 722.0], [18.7, 722.0], [18.8, 723.0], [18.9, 723.0], [19.0, 723.0], [19.1, 723.0], [19.2, 724.0], [19.3, 725.0], [19.4, 725.0], [19.5, 726.0], [19.6, 726.0], [19.7, 726.0], [19.8, 727.0], [19.9, 727.0], [20.0, 728.0], [20.1, 728.0], [20.2, 729.0], [20.3, 730.0], [20.4, 730.0], [20.5, 731.0], [20.6, 731.0], [20.7, 731.0], [20.8, 732.0], [20.9, 732.0], [21.0, 733.0], [21.1, 734.0], [21.2, 734.0], [21.3, 735.0], [21.4, 737.0], [21.5, 737.0], [21.6, 737.0], [21.7, 737.0], [21.8, 738.0], [21.9, 739.0], [22.0, 740.0], [22.1, 740.0], [22.2, 740.0], [22.3, 740.0], [22.4, 742.0], [22.5, 743.0], [22.6, 745.0], [22.7, 746.0], [22.8, 748.0], [22.9, 749.0], [23.0, 750.0], [23.1, 750.0], [23.2, 751.0], [23.3, 751.0], [23.4, 753.0], [23.5, 753.0], [23.6, 754.0], [23.7, 754.0], [23.8, 755.0], [23.9, 756.0], [24.0, 757.0], [24.1, 758.0], [24.2, 760.0], [24.3, 760.0], [24.4, 762.0], [24.5, 764.0], [24.6, 767.0], [24.7, 767.0], [24.8, 768.0], [24.9, 770.0], [25.0, 770.0], [25.1, 771.0], [25.2, 772.0], [25.3, 775.0], [25.4, 776.0], [25.5, 777.0], [25.6, 779.0], [25.7, 780.0], [25.8, 781.0], [25.9, 788.0], [26.0, 790.0], [26.1, 797.0], [26.2, 798.0], [26.3, 798.0], [26.4, 804.0], [26.5, 804.0], [26.6, 804.0], [26.7, 804.0], [26.8, 805.0], [26.9, 805.0], [27.0, 808.0], [27.1, 808.0], [27.2, 808.0], [27.3, 810.0], [27.4, 816.0], [27.5, 820.0], [27.6, 820.0], [27.7, 826.0], [27.8, 831.0], [27.9, 831.0], [28.0, 832.0], [28.1, 837.0], [28.2, 839.0], [28.3, 844.0], [28.4, 848.0], [28.5, 850.0], [28.6, 853.0], [28.7, 854.0], [28.8, 856.0], [28.9, 873.0], [29.0, 873.0], [29.1, 889.0], [29.2, 891.0], [29.3, 892.0], [29.4, 896.0], [29.5, 898.0], [29.6, 903.0], [29.7, 903.0], [29.8, 924.0], [29.9, 928.0], [30.0, 957.0], [30.1, 1052.0], [30.2, 1074.0], [30.3, 1084.0], [30.4, 1092.0], [30.5, 1102.0], [30.6, 1118.0], [30.7, 1120.0], [30.8, 1125.0], [30.9, 1136.0], [31.0, 1138.0], [31.1, 1139.0], [31.2, 1146.0], [31.3, 1147.0], [31.4, 1154.0], [31.5, 1155.0], [31.6, 1158.0], [31.7, 1165.0], [31.8, 1165.0], [31.9, 1191.0], [32.0, 1194.0], [32.1, 1201.0], [32.2, 1203.0], [32.3, 1208.0], [32.4, 1214.0], [32.5, 1335.0], [32.6, 1336.0], [32.7, 1353.0], [32.8, 1360.0], [32.9, 1411.0], [33.0, 1427.0], [33.1, 1438.0], [33.2, 1438.0], [33.3, 1456.0], [33.4, 1456.0], [33.5, 1458.0], [33.6, 1460.0], [33.7, 1462.0], [33.8, 1463.0], [33.9, 1464.0], [34.0, 1469.0], [34.1, 1469.0], [34.2, 1474.0], [34.3, 1474.0], [34.4, 1504.0], [34.5, 1508.0], [34.6, 1513.0], [34.7, 1518.0], [34.8, 1518.0], [34.9, 1519.0], [35.0, 1520.0], [35.1, 1522.0], [35.2, 1522.0], [35.3, 1531.0], [35.4, 1532.0], [35.5, 1538.0], [35.6, 1542.0], [35.7, 1549.0], [35.8, 1556.0], [35.9, 1568.0], [36.0, 1568.0], [36.1, 1569.0], [36.2, 1570.0], [36.3, 1575.0], [36.4, 1576.0], [36.5, 1584.0], [36.6, 1585.0], [36.7, 1585.0], [36.8, 1590.0], [36.9, 1592.0], [37.0, 1602.0], [37.1, 1607.0], [37.2, 1609.0], [37.3, 1615.0], [37.4, 1619.0], [37.5, 1621.0], [37.6, 1624.0], [37.7, 1638.0], [37.8, 1674.0], [37.9, 1679.0], [38.0, 1704.0], [38.1, 1706.0], [38.2, 1708.0], [38.3, 1726.0], [38.4, 1732.0], [38.5, 1742.0], [38.6, 1753.0], [38.7, 1765.0], [38.8, 1768.0], [38.9, 1786.0], [39.0, 1808.0], [39.1, 1810.0], [39.2, 1818.0], [39.3, 1825.0], [39.4, 1832.0], [39.5, 1842.0], [39.6, 1850.0], [39.7, 1853.0], [39.8, 1855.0], [39.9, 1861.0], [40.0, 1866.0], [40.1, 1867.0], [40.2, 1869.0], [40.3, 1872.0], [40.4, 1872.0], [40.5, 1873.0], [40.6, 1874.0], [40.7, 1876.0], [40.8, 1878.0], [40.9, 1885.0], [41.0, 1885.0], [41.1, 1888.0], [41.2, 1909.0], [41.3, 1912.0], [41.4, 1914.0], [41.5, 1919.0], [41.6, 1924.0], [41.7, 1924.0], [41.8, 1929.0], [41.9, 1945.0], [42.0, 1951.0], [42.1, 1957.0], [42.2, 1960.0], [42.3, 1970.0], [42.4, 1975.0], [42.5, 1979.0], [42.6, 1981.0], [42.7, 2014.0], [42.8, 2026.0], [42.9, 2036.0], [43.0, 2043.0], [43.1, 2050.0], [43.2, 2059.0], [43.3, 2068.0], [43.4, 2070.0], [43.5, 2084.0], [43.6, 2086.0], [43.7, 2100.0], [43.8, 2119.0], [43.9, 2156.0], [44.0, 2165.0], [44.1, 2165.0], [44.2, 2187.0], [44.3, 2190.0], [44.4, 2193.0], [44.5, 2197.0], [44.6, 2200.0], [44.7, 2207.0], [44.8, 2214.0], [44.9, 2242.0], [45.0, 2322.0], [45.1, 2324.0], [45.2, 2331.0], [45.3, 2351.0], [45.4, 2359.0], [45.5, 2364.0], [45.6, 2403.0], [45.7, 2419.0], [45.8, 2462.0], [45.9, 2477.0], [46.0, 2477.0], [46.1, 2479.0], [46.2, 2551.0], [46.3, 2554.0], [46.4, 2580.0], [46.5, 2622.0], [46.6, 2687.0], [46.7, 2700.0], [46.8, 2707.0], [46.9, 2749.0], [47.0, 2755.0], [47.1, 2763.0], [47.2, 2854.0], [47.3, 2874.0], [47.4, 2875.0], [47.5, 2887.0], [47.6, 2890.0], [47.7, 2909.0], [47.8, 2917.0], [47.9, 2924.0], [48.0, 2926.0], [48.1, 2935.0], [48.2, 2956.0], [48.3, 2966.0], [48.4, 2970.0], [48.5, 2972.0], [48.6, 3004.0], [48.7, 3006.0], [48.8, 3007.0], [48.9, 3014.0], [49.0, 3015.0], [49.1, 3017.0], [49.2, 3025.0], [49.3, 3029.0], [49.4, 3036.0], [49.5, 3049.0], [49.6, 3050.0], [49.7, 3053.0], [49.8, 3059.0], [49.9, 3065.0], [50.0, 3082.0], [50.1, 3083.0], [50.2, 3088.0], [50.3, 3092.0], [50.4, 3093.0], [50.5, 3098.0], [50.6, 3106.0], [50.7, 3109.0], [50.8, 3112.0], [50.9, 3113.0], [51.0, 3118.0], [51.1, 3118.0], [51.2, 3121.0], [51.3, 3121.0], [51.4, 3123.0], [51.5, 3123.0], [51.6, 3126.0], [51.7, 3127.0], [51.8, 3129.0], [51.9, 3130.0], [52.0, 3132.0], [52.1, 3133.0], [52.2, 3134.0], [52.3, 3137.0], [52.4, 3139.0], [52.5, 3141.0], [52.6, 3143.0], [52.7, 3145.0], [52.8, 3145.0], [52.9, 3145.0], [53.0, 3147.0], [53.1, 3153.0], [53.2, 3153.0], [53.3, 3154.0], [53.4, 3154.0], [53.5, 3155.0], [53.6, 3159.0], [53.7, 3163.0], [53.8, 3166.0], [53.9, 3171.0], [54.0, 3182.0], [54.1, 3186.0], [54.2, 3190.0], [54.3, 3201.0], [54.4, 3201.0], [54.5, 3203.0], [54.6, 3216.0], [54.7, 3217.0], [54.8, 3217.0], [54.9, 3221.0], [55.0, 3222.0], [55.1, 3225.0], [55.2, 3228.0], [55.3, 3234.0], [55.4, 3238.0], [55.5, 3246.0], [55.6, 3247.0], [55.7, 3252.0], [55.8, 3258.0], [55.9, 3260.0], [56.0, 3264.0], [56.1, 3265.0], [56.2, 3269.0], [56.3, 3280.0], [56.4, 3282.0], [56.5, 3291.0], [56.6, 3293.0], [56.7, 3299.0], [56.8, 3299.0], [56.9, 3305.0], [57.0, 3305.0], [57.1, 3308.0], [57.2, 3313.0], [57.3, 3322.0], [57.4, 3322.0], [57.5, 3323.0], [57.6, 3324.0], [57.7, 3334.0], [57.8, 3335.0], [57.9, 3336.0], [58.0, 3337.0], [58.1, 3340.0], [58.2, 3353.0], [58.3, 3356.0], [58.4, 3358.0], [58.5, 3362.0], [58.6, 3363.0], [58.7, 3369.0], [58.8, 3374.0], [58.9, 3377.0], [59.0, 3378.0], [59.1, 3381.0], [59.2, 3383.0], [59.3, 3385.0], [59.4, 3394.0], [59.5, 3396.0], [59.6, 3398.0], [59.7, 3399.0], [59.8, 3399.0], [59.9, 3400.0], [60.0, 3411.0], [60.1, 3424.0], [60.2, 3428.0], [60.3, 3428.0], [60.4, 3430.0], [60.5, 3431.0], [60.6, 3431.0], [60.7, 3432.0], [60.8, 3434.0], [60.9, 3442.0], [61.0, 3446.0], [61.1, 3447.0], [61.2, 3449.0], [61.3, 3461.0], [61.4, 3464.0], [61.5, 3471.0], [61.6, 3473.0], [61.7, 3477.0], [61.8, 3481.0], [61.9, 3485.0], [62.0, 3487.0], [62.1, 3497.0], [62.2, 3498.0], [62.3, 3506.0], [62.4, 3512.0], [62.5, 3523.0], [62.6, 3534.0], [62.7, 3538.0], [62.8, 3544.0], [62.9, 3547.0], [63.0, 3557.0], [63.1, 3561.0], [63.2, 3562.0], [63.3, 3562.0], [63.4, 3567.0], [63.5, 3571.0], [63.6, 3572.0], [63.7, 3573.0], [63.8, 3586.0], [63.9, 3588.0], [64.0, 3605.0], [64.1, 3606.0], [64.2, 3630.0], [64.3, 3643.0], [64.4, 3652.0], [64.5, 3658.0], [64.6, 3672.0], [64.7, 3679.0], [64.8, 3680.0], [64.9, 3681.0], [65.0, 3683.0], [65.1, 3684.0], [65.2, 3693.0], [65.3, 3697.0], [65.4, 3703.0], [65.5, 3704.0], [65.6, 3708.0], [65.7, 3709.0], [65.8, 3717.0], [65.9, 3724.0], [66.0, 3724.0], [66.1, 3744.0], [66.2, 3744.0], [66.3, 3768.0], [66.4, 3772.0], [66.5, 3793.0], [66.6, 3797.0], [66.7, 3814.0], [66.8, 3814.0], [66.9, 3831.0], [67.0, 3833.0], [67.1, 3836.0], [67.2, 3839.0], [67.3, 3842.0], [67.4, 3860.0], [67.5, 3866.0], [67.6, 3871.0], [67.7, 3871.0], [67.8, 3877.0], [67.9, 3877.0], [68.0, 3877.0], [68.1, 3880.0], [68.2, 3883.0], [68.3, 3889.0], [68.4, 3891.0], [68.5, 3895.0], [68.6, 3898.0], [68.7, 3898.0], [68.8, 3899.0], [68.9, 3900.0], [69.0, 3910.0], [69.1, 3927.0], [69.2, 3933.0], [69.3, 3938.0], [69.4, 3972.0], [69.5, 3972.0], [69.6, 3981.0], [69.7, 3983.0], [69.8, 3998.0], [69.9, 4015.0], [70.0, 4046.0], [70.1, 4074.0], [70.2, 4079.0], [70.3, 4086.0], [70.4, 4092.0], [70.5, 4100.0], [70.6, 4101.0], [70.7, 4109.0], [70.8, 4111.0], [70.9, 4115.0], [71.0, 4117.0], [71.1, 4121.0], [71.2, 4126.0], [71.3, 4132.0], [71.4, 4136.0], [71.5, 4152.0], [71.6, 4156.0], [71.7, 4157.0], [71.8, 4164.0], [71.9, 4168.0], [72.0, 4171.0], [72.1, 4172.0], [72.2, 4183.0], [72.3, 4185.0], [72.4, 4195.0], [72.5, 4196.0], [72.6, 4198.0], [72.7, 4201.0], [72.8, 4204.0], [72.9, 4218.0], [73.0, 4218.0], [73.1, 4219.0], [73.2, 4222.0], [73.3, 4228.0], [73.4, 4230.0], [73.5, 4234.0], [73.6, 4241.0], [73.7, 4245.0], [73.8, 4247.0], [73.9, 4253.0], [74.0, 4253.0], [74.1, 4253.0], [74.2, 4255.0], [74.3, 4257.0], [74.4, 4261.0], [74.5, 4261.0], [74.6, 4274.0], [74.7, 4276.0], [74.8, 4280.0], [74.9, 4281.0], [75.0, 4285.0], [75.1, 4286.0], [75.2, 4296.0], [75.3, 4302.0], [75.4, 4313.0], [75.5, 4315.0], [75.6, 4320.0], [75.7, 4336.0], [75.8, 4336.0], [75.9, 4337.0], [76.0, 4348.0], [76.1, 4351.0], [76.2, 4354.0], [76.3, 4356.0], [76.4, 4368.0], [76.5, 4376.0], [76.6, 4427.0], [76.7, 4438.0], [76.8, 4438.0], [76.9, 4439.0], [77.0, 4487.0], [77.1, 4492.0], [77.2, 4514.0], [77.3, 4515.0], [77.4, 4518.0], [77.5, 4530.0], [77.6, 4533.0], [77.7, 4534.0], [77.8, 4536.0], [77.9, 4536.0], [78.0, 4537.0], [78.1, 4539.0], [78.2, 4542.0], [78.3, 4543.0], [78.4, 4547.0], [78.5, 4548.0], [78.6, 4565.0], [78.7, 4566.0], [78.8, 4592.0], [78.9, 4597.0], [79.0, 4617.0], [79.1, 4639.0], [79.2, 4642.0], [79.3, 4649.0], [79.4, 4668.0], [79.5, 4699.0], [79.6, 4710.0], [79.7, 4714.0], [79.8, 4720.0], [79.9, 4721.0], [80.0, 4747.0], [80.1, 4747.0], [80.2, 4748.0], [80.3, 4749.0], [80.4, 4752.0], [80.5, 4757.0], [80.6, 4794.0], [80.7, 4797.0], [80.8, 4797.0], [80.9, 4798.0], [81.0, 4798.0], [81.1, 4815.0], [81.2, 4850.0], [81.3, 4859.0], [81.4, 4865.0], [81.5, 4865.0], [81.6, 4869.0], [81.7, 4886.0], [81.8, 4946.0], [81.9, 4951.0], [82.0, 4954.0], [82.1, 4955.0], [82.2, 4977.0], [82.3, 4983.0], [82.4, 4987.0], [82.5, 4987.0], [82.6, 4990.0], [82.7, 4997.0], [82.8, 5009.0], [82.9, 5010.0], [83.0, 5012.0], [83.1, 5017.0], [83.2, 5017.0], [83.3, 5026.0], [83.4, 5028.0], [83.5, 5048.0], [83.6, 5050.0], [83.7, 5053.0], [83.8, 5054.0], [83.9, 5063.0], [84.0, 5064.0], [84.1, 5068.0], [84.2, 5071.0], [84.3, 5071.0], [84.4, 5071.0], [84.5, 5073.0], [84.6, 5074.0], [84.7, 5078.0], [84.8, 5084.0], [84.9, 5088.0], [85.0, 5093.0], [85.1, 5099.0], [85.2, 5100.0], [85.3, 5116.0], [85.4, 5118.0], [85.5, 5119.0], [85.6, 5121.0], [85.7, 5123.0], [85.8, 5134.0], [85.9, 5135.0], [86.0, 5138.0], [86.1, 5149.0], [86.2, 5158.0], [86.3, 5163.0], [86.4, 5166.0], [86.5, 5171.0], [86.6, 5173.0], [86.7, 5175.0], [86.8, 5176.0], [86.9, 5184.0], [87.0, 5184.0], [87.1, 5189.0], [87.2, 5191.0], [87.3, 5194.0], [87.4, 5196.0], [87.5, 5198.0], [87.6, 5200.0], [87.7, 5205.0], [87.8, 5205.0], [87.9, 5207.0], [88.0, 5207.0], [88.1, 5208.0], [88.2, 5212.0], [88.3, 5229.0], [88.4, 5257.0], [88.5, 5271.0], [88.6, 5279.0], [88.7, 5298.0], [88.8, 5302.0], [88.9, 5302.0], [89.0, 5305.0], [89.1, 5307.0], [89.2, 5312.0], [89.3, 5325.0], [89.4, 5329.0], [89.5, 5333.0], [89.6, 5336.0], [89.7, 5337.0], [89.8, 5337.0], [89.9, 5339.0], [90.0, 5340.0], [90.1, 5342.0], [90.2, 5343.0], [90.3, 5346.0], [90.4, 5347.0], [90.5, 5348.0], [90.6, 5352.0], [90.7, 5359.0], [90.8, 5368.0], [90.9, 5372.0], [91.0, 5384.0], [91.1, 5389.0], [91.2, 5392.0], [91.3, 5399.0], [91.4, 5401.0], [91.5, 5403.0], [91.6, 5408.0], [91.7, 5425.0], [91.8, 5429.0], [91.9, 5438.0], [92.0, 5446.0], [92.1, 5448.0], [92.2, 5455.0], [92.3, 5468.0], [92.4, 5471.0], [92.5, 5471.0], [92.6, 5477.0], [92.7, 5478.0], [92.8, 5489.0], [92.9, 5491.0], [93.0, 5492.0], [93.1, 5546.0], [93.2, 5547.0], [93.3, 5573.0], [93.4, 5710.0], [93.5, 5752.0], [93.6, 5772.0], [93.7, 5772.0], [93.8, 5776.0], [93.9, 5780.0], [94.0, 5786.0], [94.1, 5787.0], [94.2, 5789.0], [94.3, 5803.0], [94.4, 5804.0], [94.5, 5836.0], [94.6, 5866.0], [94.7, 5874.0], [94.8, 5880.0], [94.9, 5896.0], [95.0, 5896.0], [95.1, 5903.0], [95.2, 5909.0], [95.3, 5912.0], [95.4, 5916.0], [95.5, 5919.0], [95.6, 5931.0], [95.7, 5939.0], [95.8, 5943.0], [95.9, 5951.0], [96.0, 5953.0], [96.1, 5953.0], [96.2, 5954.0], [96.3, 5960.0], [96.4, 5961.0], [96.5, 5968.0], [96.6, 5977.0], [96.7, 5994.0], [96.8, 5996.0], [96.9, 6003.0], [97.0, 6017.0], [97.1, 6031.0], [97.2, 6032.0], [97.3, 6035.0], [97.4, 6044.0], [97.5, 6044.0], [97.6, 6046.0], [97.7, 6049.0], [97.8, 6049.0], [97.9, 6051.0], [98.0, 6057.0], [98.1, 6077.0], [98.2, 6110.0], [98.3, 6134.0], [98.4, 6186.0], [98.5, 6223.0], [98.6, 6239.0], [98.7, 6254.0], [98.8, 6275.0], [98.9, 6405.0], [99.0, 6420.0], [99.1, 6437.0], [99.2, 6481.0], [99.3, 6487.0], [99.4, 6505.0], [99.5, 6553.0], [99.6, 6626.0], [99.7, 6927.0], [99.8, 7706.0], [99.9, 9414.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 837.0, "series": [{"data": [[0.0, 149.0], [300.0, 3.0], [100.0, 837.0], [200.0, 3.0], [400.0, 5.0], [500.0, 3.0]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[0.0, 125.0], [300.0, 9.0], [600.0, 8.0], [700.0, 5.0], [100.0, 835.0], [200.0, 11.0], [400.0, 3.0], [800.0, 1.0], [500.0, 3.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[600.0, 136.0], [700.0, 127.0], [800.0, 32.0], [900.0, 5.0], [1000.0, 4.0], [1100.0, 16.0], [1200.0, 4.0], [1300.0, 4.0], [1400.0, 15.0], [1500.0, 26.0], [1600.0, 10.0], [1700.0, 10.0], [1800.0, 22.0], [1900.0, 15.0], [2000.0, 10.0], [2100.0, 9.0], [2200.0, 4.0], [2300.0, 6.0], [2400.0, 6.0], [2500.0, 3.0], [2600.0, 2.0], [2700.0, 5.0], [2800.0, 5.0], [2900.0, 9.0], [3000.0, 20.0], [3100.0, 37.0], [3200.0, 26.0], [3300.0, 30.0], [3400.0, 24.0], [3500.0, 17.0], [3600.0, 14.0], [3700.0, 13.0], [3800.0, 22.0], [3900.0, 10.0], [4000.0, 6.0], [4200.0, 26.0], [4100.0, 22.0], [4300.0, 14.0], [4600.0, 6.0], [4400.0, 6.0], [4500.0, 18.0], [4800.0, 7.0], [4700.0, 15.0], [5100.0, 24.0], [5000.0, 24.0], [4900.0, 10.0], [5300.0, 26.0], [5200.0, 12.0], [5400.0, 17.0], [5500.0, 3.0], [5800.0, 8.0], [5700.0, 9.0], [5900.0, 18.0], [6000.0, 13.0], [6100.0, 3.0], [6200.0, 4.0], [6500.0, 2.0], [6400.0, 5.0], [6600.0, 1.0], [6900.0, 1.0], [7700.0, 1.0], [9400.0, 1.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 363.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1980.0, "series": [{"data": [[0.0, 1980.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 363.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 657.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 268.8586666666666, "minX": 1.66745838E12, "maxY": 268.8586666666666, "series": [{"data": [[1.66745838E12, 268.8586666666666]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745838E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 75.0, "minX": 1.0, "maxY": 7706.0, "series": [{"data": [[20.0, 122.0], [21.0, 123.0], [22.0, 123.0], [23.0, 122.0], [26.0, 125.0], [28.0, 107.0], [30.0, 93.91666666666666], [37.0, 86.0], [42.0, 118.0], [51.0, 123.0], [50.0, 134.0], [55.0, 110.0], [54.0, 89.0], [61.0, 106.23529411764706], [63.0, 98.83333333333334], [62.0, 101.25], [66.0, 151.0], [64.0, 106.5], [68.0, 154.0], [77.0, 185.0], [82.0, 101.0], [85.0, 97.0], [91.0, 96.66666666666667], [89.0, 89.0], [88.0, 86.8], [98.0, 103.25], [97.0, 102.0], [96.0, 105.5], [105.0, 112.0], [109.0, 92.11111111111109], [135.0, 112.0], [131.0, 107.0], [140.0, 94.0], [139.0, 110.0], [137.0, 109.0], [136.0, 115.0], [151.0, 257.0], [149.0, 112.0], [148.0, 93.5], [147.0, 88.85714285714286], [146.0, 106.0], [145.0, 94.0], [144.0, 91.0], [157.0, 416.0], [156.0, 109.0], [167.0, 107.0], [175.0, 95.0], [174.0, 101.0], [173.0, 105.66666666666667], [171.0, 120.0], [170.0, 109.0], [168.0, 105.0], [183.0, 123.0], [182.0, 91.0], [181.0, 75.0], [180.0, 89.0], [179.0, 101.85714285714286], [178.0, 102.0], [177.0, 102.0], [191.0, 120.25], [189.0, 143.0], [188.0, 112.33333333333333], [184.0, 112.2], [187.0, 104.0], [190.0, 112.0], [186.0, 103.0], [185.0, 106.0], [194.0, 126.66666666666667], [196.0, 126.0], [193.0, 120.0], [195.0, 121.0], [192.0, 97.0], [205.0, 119.5], [202.0, 156.0], [200.0, 138.0], [204.0, 110.0], [212.0, 131.58823529411762], [210.0, 122.37500000000001], [208.0, 141.5], [213.0, 133.0], [211.0, 128.66666666666666], [215.0, 121.0], [217.0, 129.0], [223.0, 111.33333333333333], [222.0, 95.5], [221.0, 106.49999999999999], [216.0, 116.66666666666667], [230.0, 133.0909090909091], [228.0, 129.25], [231.0, 118.0], [229.0, 123.66666666666667], [227.0, 115.5], [224.0, 102.5], [236.0, 175.99999999999997], [233.0, 130.5789473684211], [238.0, 124.66666666666667], [237.0, 146.0], [232.0, 122.33333333333333], [239.0, 125.5], [242.0, 565.0], [244.0, 140.5], [241.0, 117.1578947368421], [247.0, 87.0], [254.0, 179.33333333333331], [255.0, 118.75], [250.0, 98.0], [249.0, 95.0], [259.0, 105.0], [257.0, 104.33333333333333], [256.0, 104.0], [258.0, 110.0], [270.0, 104.0], [271.0, 104.5], [265.0, 122.0], [264.0, 119.0], [262.0, 127.0], [261.0, 111.0], [260.0, 124.0], [286.0, 102.0], [284.0, 113.5], [275.0, 117.5], [274.0, 121.33333333333333], [273.0, 123.57142857142857], [272.0, 110.88888888888889], [283.0, 114.66666666666667], [282.0, 104.0], [281.0, 127.15384615384616], [280.0, 182.33333333333334], [287.0, 123.0], [278.0, 148.0], [276.0, 141.0], [277.0, 116.5], [285.0, 100.0], [302.0, 141.42857142857142], [303.0, 139.5], [300.0, 160.0], [291.0, 105.5], [301.0, 121.25], [299.0, 139.0], [298.0, 113.2], [297.0, 107.5], [296.0, 131.66666666666666], [293.0, 134.0], [295.0, 109.5], [294.0, 107.33333333333333], [292.0, 121.5], [290.0, 146.0], [288.0, 117.6], [289.0, 116.66666666666667], [307.0, 161.46666666666667], [314.0, 143.0], [313.0, 136.0], [312.0, 121.0], [319.0, 121.25], [315.0, 130.5], [308.0, 162.99999999999997], [310.0, 145.0], [309.0, 132.00000000000003], [311.0, 129.8], [306.0, 122.75], [305.0, 285.6666666666667], [304.0, 145.5], [318.0, 120.66666666666667], [316.0, 92.5], [317.0, 110.2], [328.0, 105.0], [331.0, 141.66666666666666], [332.0, 115.83333333333334], [330.0, 128.66666666666666], [329.0, 102.6], [327.0, 100.33333333333333], [326.0, 107.0], [324.0, 117.0], [321.0, 110.93333333333335], [320.0, 104.33333333333333], [333.0, 124.75], [335.0, 111.14285714285714], [334.0, 129.3], [323.0, 122.0], [322.0, 122.5], [348.0, 150.0], [351.0, 127.33333333333333], [344.0, 120.75], [350.0, 149.0], [349.0, 130.0], [347.0, 138.71428571428572], [346.0, 111.0], [345.0, 120.45454545454547], [343.0, 133.0], [342.0, 108.33333333333333], [340.0, 130.0], [341.0, 119.0], [338.0, 119.87499999999999], [339.0, 132.0], [337.0, 120.3125], [336.0, 120.0], [355.0, 144.14285714285714], [366.0, 228.0], [365.0, 149.0], [363.0, 157.0], [361.0, 157.0], [356.0, 155.0], [354.0, 137.33333333333334], [358.0, 301.0], [352.0, 104.0], [380.0, 159.25], [383.0, 154.0], [382.0, 141.0], [381.0, 169.0], [377.0, 169.0], [378.0, 115.5], [379.0, 143.5], [376.0, 113.0], [373.0, 137.1], [372.0, 125.16666666666666], [371.0, 159.75], [370.0, 174.5], [369.0, 195.8], [368.0, 165.5], [375.0, 121.09090909090911], [374.0, 125.0], [386.0, 128.25], [399.0, 131.10000000000002], [397.0, 141.98076923076925], [387.0, 118.0], [395.0, 144.0], [393.0, 166.0], [392.0, 93.0], [391.0, 120.0], [390.0, 115.42857142857142], [385.0, 107.33333333333333], [384.0, 122.0], [389.0, 126.0], [1.0, 508.0]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[272.72999999999973, 125.71999999999991]], "isOverall": false, "label": "getUser-Aggregated", "isController": false}, {"data": [[6.0, 105.33333333333333], [8.0, 103.5], [9.0, 102.0], [12.0, 117.33333333333333], [15.0, 115.0], [20.0, 115.0], [23.0, 114.5], [24.0, 124.0], [25.0, 116.75], [26.0, 113.0], [28.0, 122.33333333333333], [29.0, 97.0], [30.0, 95.0], [39.0, 127.0], [41.0, 127.5], [43.0, 122.0], [42.0, 120.0], [45.0, 128.0], [44.0, 124.33333333333333], [46.0, 128.0], [48.0, 124.0], [51.0, 125.5], [53.0, 113.0], [55.0, 107.0], [57.0, 107.0], [56.0, 104.5], [59.0, 112.0], [61.0, 77.0], [60.0, 117.0], [63.0, 96.0], [62.0, 99.0], [66.0, 151.0], [65.0, 149.0], [64.0, 122.0], [71.0, 172.0], [70.0, 170.0], [69.0, 171.0], [68.0, 163.0], [75.0, 186.0], [74.0, 197.0], [73.0, 180.0], [72.0, 176.0], [79.0, 88.0], [78.0, 146.0], [77.0, 174.0], [76.0, 177.0], [82.0, 97.0], [81.0, 96.5], [87.0, 94.5], [85.0, 97.5], [84.0, 95.0], [91.0, 80.0], [90.0, 89.0], [89.0, 84.0], [88.0, 92.0], [94.0, 95.0], [93.0, 93.0], [92.0, 93.0], [99.0, 99.0], [97.0, 93.0], [96.0, 88.5], [103.0, 106.0], [102.0, 110.0], [100.0, 112.0], [107.0, 91.0], [106.0, 93.0], [105.0, 105.0], [104.0, 105.0], [111.0, 118.0], [109.0, 90.0], [108.0, 106.0], [114.0, 106.5], [112.0, 104.5], [119.0, 130.0], [117.0, 118.0], [116.0, 97.0], [123.0, 635.0], [122.0, 645.0], [121.0, 127.0], [120.0, 107.0], [127.0, 128.33333333333334], [126.0, 137.0], [124.0, 633.0], [135.0, 109.0], [134.0, 115.0], [133.0, 114.0], [132.0, 117.0], [131.0, 134.0], [130.0, 125.0], [129.0, 123.0], [142.0, 90.0], [141.0, 93.0], [140.0, 99.0], [139.0, 110.0], [138.0, 112.0], [137.0, 98.0], [136.0, 99.0], [151.0, 98.0], [150.0, 113.0], [149.0, 102.0], [148.0, 133.0], [147.0, 81.0], [146.0, 98.0], [145.0, 84.0], [144.0, 82.0], [159.0, 103.0], [157.0, 115.0], [156.0, 110.0], [155.0, 110.0], [154.0, 121.0], [153.0, 118.5], [167.0, 118.0], [166.0, 107.0], [165.0, 217.0], [164.0, 103.0], [163.0, 104.0], [160.0, 105.0], [175.0, 94.0], [174.0, 97.0], [173.0, 113.0], [172.0, 302.0], [171.0, 106.0], [170.0, 111.0], [169.0, 105.0], [168.0, 107.0], [183.0, 114.2], [182.0, 99.0], [181.0, 94.0], [180.0, 104.0], [179.0, 93.0], [178.0, 91.0], [177.0, 95.0], [191.0, 126.66666666666667], [189.0, 125.33333333333333], [188.0, 137.2], [184.0, 117.25], [187.0, 106.5], [186.0, 113.33333333333333], [190.0, 104.0], [185.0, 88.0], [198.0, 140.5], [197.0, 146.0], [195.0, 125.0], [193.0, 113.83333333333333], [192.0, 122.0], [196.0, 114.5], [194.0, 111.0], [207.0, 112.0], [206.0, 121.0], [205.0, 123.33333333333333], [203.0, 121.0], [202.0, 128.0], [201.0, 110.0], [200.0, 122.0], [204.0, 104.0], [215.0, 132.33333333333334], [214.0, 123.75], [212.0, 113.5], [211.0, 120.5], [210.0, 111.2], [208.0, 111.5], [213.0, 132.0], [221.0, 287.33333333333337], [219.0, 114.5], [218.0, 119.0], [217.0, 123.0], [222.0, 103.0], [220.0, 107.0], [216.0, 114.0], [230.0, 125.66666666666667], [228.0, 130.33333333333334], [226.0, 127.8], [229.0, 123.0], [227.0, 103.0], [225.0, 98.0], [224.0, 316.5], [239.0, 269.8], [238.0, 157.57142857142858], [237.0, 123.5], [236.0, 218.99999999999997], [234.0, 110.0], [233.0, 121.2], [235.0, 124.0], [232.0, 110.66666666666667], [247.0, 130.66666666666666], [246.0, 130.5], [245.0, 117.85714285714286], [244.0, 142.8], [243.0, 127.66666666666667], [242.0, 364.0], [240.0, 423.0], [241.0, 124.0], [254.0, 131.5], [253.0, 125.0], [251.0, 118.0], [250.0, 127.0], [249.0, 142.5], [248.0, 123.5], [255.0, 105.0], [259.0, 141.0], [269.0, 134.0], [268.0, 131.8], [266.0, 286.5], [267.0, 117.0], [265.0, 140.5], [271.0, 105.5], [264.0, 107.0], [270.0, 99.0], [262.0, 128.5], [261.0, 193.33333333333334], [260.0, 157.66666666666666], [258.0, 135.0], [257.0, 126.25], [256.0, 121.0], [263.0, 139.0], [286.0, 125.2], [284.0, 120.0], [275.0, 125.6], [285.0, 125.0], [283.0, 116.5], [282.0, 113.5], [281.0, 121.0], [280.0, 238.83333333333331], [287.0, 118.0], [278.0, 144.8], [277.0, 121.4], [276.0, 131.0], [279.0, 124.2], [274.0, 129.5], [273.0, 126.75], [272.0, 124.14285714285714], [302.0, 130.66666666666666], [303.0, 127.33333333333333], [301.0, 113.71428571428572], [300.0, 108.0], [299.0, 112.66666666666667], [298.0, 100.2], [297.0, 116.0], [296.0, 112.33333333333333], [294.0, 123.0], [293.0, 203.14285714285717], [292.0, 100.0], [291.0, 118.25], [290.0, 121.33333333333333], [295.0, 112.5], [288.0, 94.0], [289.0, 109.66666666666667], [307.0, 133.85714285714286], [317.0, 137.8], [319.0, 139.14285714285714], [312.0, 125.0], [318.0, 124.2], [316.0, 119.0], [314.0, 215.25], [315.0, 128.0], [313.0, 130.66666666666669], [310.0, 207.0], [309.0, 140.14285714285714], [308.0, 286.0], [311.0, 144.5], [304.0, 217.66666666666666], [306.0, 141.6], [305.0, 305.6666666666667], [332.0, 125.99999999999999], [335.0, 110.0], [333.0, 144.875], [334.0, 127.23076923076924], [331.0, 124.91666666666666], [330.0, 170.11111111111114], [328.0, 145.5], [329.0, 120.33333333333333], [326.0, 132.33333333333331], [327.0, 120.75000000000001], [320.0, 117.5], [322.0, 140.0], [323.0, 117.6], [321.0, 131.84615384615387], [325.0, 140.0], [324.0, 132.4], [350.0, 234.16666666666666], [351.0, 146.0], [349.0, 115.0], [348.0, 123.0], [347.0, 142.66666666666666], [346.0, 117.22222222222223], [345.0, 125.33333333333333], [344.0, 127.0], [342.0, 119.28571428571429], [338.0, 124.0], [339.0, 117.66666666666667], [337.0, 144.16666666666666], [336.0, 161.0], [343.0, 115.0], [340.0, 183.33333333333331], [341.0, 123.8], [355.0, 134.0], [365.0, 153.0], [366.0, 165.6], [364.0, 122.25], [363.0, 120.0], [362.0, 108.0], [360.0, 109.0], [367.0, 98.0], [359.0, 158.0], [358.0, 168.0], [357.0, 120.4], [356.0, 297.0], [354.0, 122.0], [353.0, 129.0], [352.0, 122.83333333333333], [381.0, 147.33333333333334], [383.0, 135.5], [382.0, 123.5], [380.0, 130.25], [371.0, 180.5], [370.0, 163.0], [369.0, 154.6], [368.0, 117.0], [379.0, 143.0], [378.0, 153.5], [377.0, 136.25], [376.0, 120.5], [375.0, 142.0], [373.0, 129.33333333333334], [374.0, 108.66666666666667], [372.0, 120.25], [398.0, 145.0], [399.0, 136.0], [396.0, 152.0], [397.0, 109.66666666666667], [387.0, 119.0], [395.0, 129.0], [394.0, 141.25], [393.0, 140.0], [392.0, 109.0], [390.0, 120.33333333333333], [389.0, 131.5], [388.0, 119.25], [386.0, 111.85714285714286], [385.0, 132.75], [384.0, 127.5], [391.0, 123.0], [1.0, 476.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[261.111, 136.91700000000014]], "isOverall": false, "label": "getListOfUser-Aggregated", "isController": false}, {"data": [[39.0, 3740.0], [42.0, 4109.0], [45.0, 3153.0], [51.0, 3132.0], [54.0, 2242.0], [57.0, 4092.0], [59.0, 2750.5], [61.0, 3360.3333333333335], [60.0, 3290.8181818181815], [63.0, 3360.6666666666665], [66.0, 2882.0], [65.0, 3723.25], [64.0, 3783.8571428571427], [71.0, 3469.5], [70.0, 2935.0], [69.0, 2871.5], [68.0, 2860.0], [73.0, 3790.5], [72.0, 3877.0], [77.0, 3736.0], [76.0, 4074.0], [87.0, 3544.0], [85.0, 3724.0], [91.0, 3471.0], [99.0, 5752.0], [98.0, 3325.0], [101.0, 1901.6666666666667], [100.0, 3015.0], [105.0, 1765.0], [109.0, 2299.4347826086955], [112.0, 1444.0], [117.0, 5573.0], [123.0, 5991.5], [126.0, 6405.0], [124.0, 5006.2], [131.0, 3588.0], [130.0, 5028.0], [151.0, 5286.75], [150.0, 5196.0], [149.0, 5202.0], [148.0, 7309.5], [147.0, 5494.25], [146.0, 6254.0], [159.0, 5119.0], [158.0, 5104.5], [157.0, 5134.0], [155.0, 5148.0], [154.0, 5189.0], [167.0, 4827.666666666667], [166.0, 5257.0], [164.0, 4934.5], [161.0, 5118.0], [160.0, 5121.0], [174.0, 5191.0], [170.0, 5026.0], [169.0, 1074.0], [183.0, 5099.0], [181.0, 5100.0], [179.0, 5149.0], [188.0, 4331.090909090908], [187.0, 2190.0], [184.0, 2207.0], [190.0, 4995.666666666666], [186.0, 5078.0], [199.0, 2068.0], [198.0, 3412.5], [195.0, 4010.4], [193.0, 2738.1333333333328], [203.0, 2043.0], [201.0, 2050.0], [206.0, 790.0], [202.0, 4886.75], [212.0, 2139.2999999999997], [215.0, 3851.5], [213.0, 3017.5714285714284], [210.0, 3815.8], [208.0, 2026.0], [211.0, 3541.333333333333], [223.0, 1096.3333333333333], [222.0, 3501.0], [221.0, 3364.8], [219.0, 2274.75], [217.0, 2370.0], [218.0, 1866.5], [220.0, 4757.0], [231.0, 2370.0], [229.0, 1698.5], [228.0, 3334.0], [227.0, 1869.5], [226.0, 2203.6666666666665], [225.0, 3825.5], [224.0, 3861.5], [230.0, 1381.7], [239.0, 1832.5], [238.0, 1300.5], [236.0, 3355.578947368421], [235.0, 2700.0], [234.0, 1243.4], [233.0, 1232.5217391304348], [237.0, 1734.0], [232.0, 3910.0], [247.0, 1566.6666666666667], [246.0, 1476.1999999999998], [245.0, 2012.5], [244.0, 1973.0], [243.0, 3231.0], [242.0, 2326.0], [241.0, 3975.6875], [240.0, 4200.5], [251.0, 3136.0], [249.0, 1175.5714285714284], [252.0, 1118.5], [248.0, 3971.6666666666665], [254.0, 1596.0], [255.0, 3305.0], [257.0, 3335.0], [259.0, 1698.6666666666665], [261.0, 1592.0], [260.0, 1336.0], [271.0, 3648.0], [269.0, 4253.0], [267.0, 4253.0], [264.0, 4260.5], [263.0, 4323.5], [256.0, 1194.0], [262.0, 4376.0], [274.0, 5912.0], [278.0, 804.0], [279.0, 4218.0], [282.0, 5866.0], [281.0, 5772.9285714285725], [276.0, 6343.5], [283.0, 6465.0], [277.0, 6491.0], [275.0, 5139.5], [285.0, 4218.0], [280.0, 4300.0], [273.0, 5728.857142857143], [272.0, 5986.6], [301.0, 2498.6], [300.0, 5342.0], [299.0, 5163.0], [298.0, 1967.5714285714287], [296.0, 5611.666666666667], [297.0, 667.0], [303.0, 2446.6666666666665], [302.0, 698.5], [294.0, 4949.6], [293.0, 5421.5], [292.0, 4967.5], [295.0, 6110.0], [291.0, 4152.0], [307.0, 1085.875], [310.0, 1309.3333333333333], [304.0, 2769.0], [311.0, 737.0], [306.0, 712.4444444444445], [308.0, 2477.0], [317.0, 3296.3076923076924], [313.0, 2416.3333333333335], [318.0, 1182.4], [312.0, 712.0], [316.0, 1928.0], [315.0, 3154.0], [334.0, 1582.8636363636365], [321.0, 3478.5], [326.0, 2401.5], [324.0, 3130.75], [325.0, 2183.5], [333.0, 2412.5], [331.0, 2659.5263157894738], [330.0, 760.0], [329.0, 3618.5555555555557], [328.0, 1933.4999999999998], [335.0, 717.7142857142857], [327.0, 2150.1428571428573], [323.0, 3122.5624999999995], [332.0, 769.3333333333334], [350.0, 1088.0], [338.0, 4430.333333333334], [347.0, 2365.896551724138], [349.0, 676.0], [348.0, 3886.0], [337.0, 4180.533333333334], [336.0, 1968.75], [345.0, 1571.2], [343.0, 876.6666666666666], [344.0, 1102.0], [360.0, 1531.0], [365.0, 1575.0], [363.0, 1579.5], [364.0, 3400.6], [362.0, 5135.0], [359.0, 5214.75], [375.0, 692.2068965517243], [373.0, 1411.4], [376.0, 685.5], [378.0, 711.6666666666666], [374.0, 672.3333333333334], [380.0, 661.0], [379.0, 655.5], [377.0, 677.5], [372.0, 748.0], [397.0, 3138.5797101449275], [385.0, 1144.1000000000001], [384.0, 695.0], [386.0, 976.3333333333334], [387.0, 688.3333333333334], [396.0, 898.0], [388.0, 1387.6666666666667], [390.0, 1649.4999999999998], [389.0, 650.3333333333334], [391.0, 1697.0], [392.0, 2583.125], [393.0, 3154.2], [394.0, 3461.4], [395.0, 3335.0], [399.0, 1460.0], [398.0, 1556.0], [1.0, 7706.0]], "isOverall": false, "label": "register", "isController": false}, {"data": [[272.72999999999996, 2828.280000000001]], "isOverall": false, "label": "register-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 399.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9950.0, "minX": 1.66745838E12, "maxY": 56393.933333333334, "series": [{"data": [[1.66745838E12, 56393.933333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66745838E12, 9950.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745838E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 125.71999999999991, "minX": 1.66745838E12, "maxY": 2828.280000000001, "series": [{"data": [[1.66745838E12, 125.71999999999991]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[1.66745838E12, 136.91700000000014]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[1.66745838E12, 2828.280000000001]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745838E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 125.68299999999999, "minX": 1.66745838E12, "maxY": 2828.228, "series": [{"data": [[1.66745838E12, 125.68299999999999]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[1.66745838E12, 130.6740000000001]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[1.66745838E12, 2828.228]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745838E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66745838E12, "maxY": 2340.0499999999984, "series": [{"data": [[1.66745838E12, 0.0]], "isOverall": false, "label": "getUser", "isController": false}, {"data": [[1.66745838E12, 0.0]], "isOverall": false, "label": "getListOfUser", "isController": false}, {"data": [[1.66745838E12, 2340.0499999999984]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745838E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 75.0, "minX": 1.66745838E12, "maxY": 9414.0, "series": [{"data": [[1.66745838E12, 9414.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66745838E12, 75.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66745838E12, 4071.2000000000025]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66745838E12, 6016.859999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66745838E12, 137.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.66745838E12, 5092.749999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745838E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 113.5, "minX": 1.0, "maxY": 4107.0, "series": [{"data": [[2.0, 4107.0], [40.0, 2930.5], [169.0, 146.0], [187.0, 125.0], [198.0, 138.5], [231.0, 118.0], [62.0, 1658.5], [261.0, 129.0], [1.0, 476.0], [305.0, 126.0], [335.0, 123.0], [353.0, 135.0], [376.0, 113.5], [480.0, 157.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 480.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 112.5, "minX": 1.0, "maxY": 4107.0, "series": [{"data": [[2.0, 4107.0], [40.0, 2930.0], [169.0, 146.0], [187.0, 125.0], [198.0, 138.5], [231.0, 118.0], [62.0, 1658.5], [261.0, 129.0], [1.0, 476.0], [305.0, 126.0], [335.0, 123.0], [353.0, 135.0], [376.0, 112.5], [480.0, 157.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 480.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66745838E12, "maxY": 50.0, "series": [{"data": [[1.66745838E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745838E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66745838E12, "maxY": 50.0, "series": [{"data": [[1.66745838E12, 50.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66745838E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66745838E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66745838E12, 16.666666666666668]], "isOverall": false, "label": "register-success", "isController": false}, {"data": [[1.66745838E12, 16.666666666666668]], "isOverall": false, "label": "getUser-success", "isController": false}, {"data": [[1.66745838E12, 16.666666666666668]], "isOverall": false, "label": "getListOfUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745838E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.66745838E12, "maxY": 50.0, "series": [{"data": [[1.66745838E12, 50.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66745838E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

